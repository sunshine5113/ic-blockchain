table ip filter {
  chain INPUT {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmp type destination-unreachable accept
    icmp type source-quench accept
    icmp type time-exceeded accept
    icmp type parameter-problem accept
    icmp type echo-request accept
    icmp type echo-reply accept
    ip saddr { 0.0.0.0/0 } ct state { new } tcp dport { 80, 443 } accept
  }

  chain FORWARD {
    type filter hook forward priority filter; policy drop;
  }

  chain OUTPUT {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmp type destination-unreachable accept
    icmp type source-quench accept
    icmp type time-exceeded accept
    icmp type parameter-problem accept
    icmp type echo-request accept
    icmp type echo-reply accept
    ip daddr { 0.0.0.0/0 } ct state { new } tcp dport { 53 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } udp dport { 53 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } udp dport { 123 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } tcp dport { 80, 443 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } tcp dport { 8080 } accept
  }
}
table ip6 filter {
  chain INPUT {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmpv6 type destination-unreachable accept
    icmpv6 type packet-too-big accept
    icmpv6 type time-exceeded accept
    icmpv6 type parameter-problem accept
    icmpv6 type echo-request accept
    icmpv6 type echo-reply accept
    icmpv6 type nd-router-advert accept
    icmpv6 type nd-neighbor-solicit accept
    icmpv6 type nd-neighbor-advert accept
    ip6 saddr { ::/0 } ct state { new } tcp dport { 80, 443 } accept
    ip6 saddr { 2001:438:fffd:11c::/64, 2001:470:1:c76::/64, 2001:920:401a:1706::/64, 2001:920:401a:1708::/64, 2001:920:401a:1710::/64, 2001:4d78:400:10a::/64, 2001:4d78:40d::/48, 2401:3f00:1000:22::-2401:3f00:1000:24:ffff:ffff:ffff:ffff, 2600:c02:b002:15::/64, 2600:c0d:3002:4::/64, 2600:2c01:21::/64, 2600:3000:1300:1300::/64, 2600:3000:6100:200::/64, 2600:3004:1200:1200::/56, 2600:3006:1400:1500::/64, 2604:1380:4091:3000::/64, 2604:1380:40e1:4700::/64, 2604:1380:40f1:1700::/64, 2604:1380:45d1:bf00::/64, 2604:1380:45e1:a600::/64, 2604:1380:45f1:9400::/64, 2604:1380:4601:6200::/64, 2604:1380:4641:6100::/64, 2604:3fc0:2001::/48, 2604:3fc0:3002::/48, 2604:6800:258:1::/64, 2604:7e00:30:3::/64, 2604:7e00:50::/64, 2604:b900:4001:76::/64, 2607:f1d0:10:1::/64, 2607:f6f0:3004::/48, 2607:f758:1220::/64, 2607:f758:c300::/64, 2607:fb58:9005::/48, 2607:ff70:3:2::/64, 2610:190:6000:1::/64, 2610:190:df01:5::/64, 2a00:fa0:3::/48, 2a00:fc0:5000:300::/64, 2a00:fb01:400::/55, 2a01:138:900a::/48, 2a01:2a8:a13c:1::/64, 2a01:2a8:a13d:1::/64, 2a01:2a8:a13e:1::/64, 2a02:418:3002::/64, 2a02:41b:300e::/48, 2a02:800:2:2003::/64, 2a04:9dc0:0:108::/64, 2a05:d01c:e2c:a700::/56, 2a0b:21c0:b002:2::/64, 2a0f:cd00:2::/56, fd00:2:1:1::/64 } ct state { new } tcp dport { 22, 9100, 9113, 19531 } accept
  }

  chain FORWARD {
    type filter hook forward priority filter; policy drop;
  }

  chain OUTPUT {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmpv6 type destination-unreachable accept
    icmpv6 type packet-too-big accept
    icmpv6 type time-exceeded accept
    icmpv6 type parameter-problem accept
    icmpv6 type echo-request accept
    icmpv6 type echo-reply accept
    icmpv6 type nd-router-solicit accept
    icmpv6 type nd-neighbor-solicit accept
    icmpv6 type nd-neighbor-advert accept
    ip6 daddr { ::/0 } ct state { new } tcp dport { 53 } accept
    ip6 daddr { ::/0 } ct state { new } udp dport { 53 } accept
    ip6 daddr { ::/0 } ct state { new } udp dport { 123 } accept
    ip6 daddr { ::/0 } ct state { new } tcp dport { 80, 443 } accept
    ip6 daddr { ::/0 } ct state { new } tcp dport { 8080 } accept
  }
}
