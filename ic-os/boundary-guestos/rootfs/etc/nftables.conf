#!/usr/sbin/nft -f

flush ruleset

define icmp_v4_types_accept = {
  destination-unreachable,
  source-quench,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply
}

define icmp_v6_in_types_accept = {
  destination-unreachable,
  packet-too-big,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply,
  nd-router-advert,
  nd-neighbor-solicit,
  nd-neighbor-advert
}

define icmp_v6_out_types_accept = {
  destination-unreachable,
  packet-too-big,
  time-exceeded,
  parameter-problem,
  echo-request,
  echo-reply,
  nd-router-solicit,
  nd-neighbor-solicit,
  nd-neighbor-advert
}

define ipv6_replicas_icr_accept = {
  2001:438:fffd:11c::/64,   # BC1
  2001:470:1:c76::/64,      # FM1
  2001:4d78:400:10a::/64,   # FR2
  2001:4d78:40d::/48,       # FR1
  2001:920:401a:1706::/64,  # BR2
  2001:920:401a:1708::/64,  # AN1
  2001:920:401a:1710::/64,  # BR1
  2401:3f00:1000:22::/64,   # SG2
  2401:3f00:1000:23::/64,   # SG3
  2401:3f00:1000:24::/64,   # SG1
  2600:2c01:21::/64,        # JV1
  2600:c00:2:100::/64,      # SE1
  2600:3000:1300:1300::/64, # DN1
  2600:3000:6100:200::/64,  # DL1
  2600:3004:1200:1200::/56, # PL1
  2600:3006:1400:1500::/64, # LV1
  2600:c02:b002:15::/64,    # SJ1
  2600:c0d:3002:4::/64,     # BO1
  2602:ffe4:801:16::/64,    # TY1
  2602:ffe4:801:17::/64,    # TY2
  2602:ffe4:801:18::/64,    # TY3
  2604:3fc0:2001::/48,      # AT2
  2604:3fc0:3002::/48,      # OR1
  2604:6800:258:1::/64,     # DM1
  2604:7e00:30:3::/64,      # AW1
  2604:7e00:50::/64,        # CH2
  2604:b900:4001:76::/64,   # HU1
  2607:f1d0:10:1::/64,      # NY1
  2607:f6f0:3004::/48,      # CH1
  2607:f758:1220::/64,      # AT1
  2607:f758:c300::/64,      # TP1
  2607:fb58:9005::/48,      # SF1
  2607:ff70:3:2::/64,       # CH3
  2610:190:6000:1::/64,     # PH1
  2610:190:df01:5::/64,     # ST1
  2a00:fa0:3::/48,          # GE2
  2a00:fb01:400::/56,       # ZH1
  2a00:fb01:400:100::/56,   # ZH2
  2a00:fc0:5000:300::/64,   # MB1
  2a01:138:900a::/48,       # MU1
  2a01:2a8:a13c:1::/64,     # ZH6
  2a01:2a8:a13d:1::/64,     # ZH5
  2a01:2a8:a13e:1::/64,     # ZH7
  2a02:418:3002::/64,       # ZH3
  2a02:41b:300e::/48,       # ZH4
  2a02:800:2:2003::/64,     # LJ1
  2a04:9dc0:0:108::/64,     # BU1
  2a0b:21c0:b002:2::/64,    # MR1
  2a0f:cd00:2::/56          # GE1
}

define ipv6_replicas_accept = {
  $ipv6_replicas_icr_accept
}

define ipv6_boundary_nodes_equinix_metal_accept = {
  2604:1380:4091:3000::/48, # FR2
  2604:1380:40e1:4700::/48, # SG1
  2604:1380:45e1:a600::/48, # SV15
  2604:1380:4601:6200::/48, # AM6
  2604:1380:4641:6100::/48  # DA11
}

define ipv6_boundary_nodes_accept = {
  $ipv6_boundary_nodes_equinix_metal_accept
}

define ipv6_pritunl_accept = {
  2001:4d78:40d::/48,  # FR1
  2607:f6f0:3004::/48, # CH1
  2607:fb58:9005::/48, # SF1
  2a00:fb01:400::/56   # ZH1
}

define ipv6_monitoring_accept = {
  2a05:d01c:e2c:a700::/56, # AWS eu-west-2 London Monitoring VPC
  $ipv6_pritunl_accept
}

define ipv6_socks_ports = {
  socks, # dante
  1443   # stunnel
}

define ipv6_monitoring_ports = {
  9100, # node-exporter
  9113, # nginx
  9312, # control-plane
  9313, # prober
  9314, # icx-proxy
  9315  # vector-nginx
}

table ip filter {
  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { http, https } accept

    include "ipv4-dev.ruleset"
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https, 8080 } accept
    ct state new udp dport { domain, ntp } accept
    meta skuid socks ct state new tcp dport 1-65535 accept
  }
}

table ip6 filter {
  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    icmpv6 type $icmp_v6_in_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { http, https } accept
    ip6 saddr $ipv6_pritunl_accept ct state new tcp dport { ssh, 19531 } accept
    ip6 saddr $ipv6_replicas_accept ct state new tcp dport $ipv6_socks_ports accept
    ip6 saddr $ipv6_monitoring_accept ct state new tcp dport $ipv6_monitoring_ports accept

    include "ipv6-dev.ruleset"
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    icmpv6 type $icmp_v6_out_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https, 8080 } accept
    ct state new udp dport { domain, ntp } accept
  }
}
