{"version":3,"sources":["webpack://ic-agent-sw-cert-app/webpack/bootstrap","webpack://ic-agent-sw-cert-app/webpack/runtime/get javascript chunk filename","webpack://ic-agent-sw-cert-app/webpack/runtime/hasOwnProperty shorthand","webpack://ic-agent-sw-cert-app/webpack/runtime/publicPath","webpack://ic-agent-sw-cert-app/webpack/runtime/jsonp chunk loading","webpack://ic-agent-sw-cert-app/./src/index.ts"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","document","baseURI","self","location","href","window","addEventListener","async","navigator","serviceWorker","console","log","reg","register","URL","installing","sw","waiting","onstatechange","state","reload","active","setTimeout","message","statusEl","getElementById","innerText","updateStatus"],"mappings":"UACIA,EAAsB,CAG1B,E,GCHA,EAAyBC,GAEZA,EAAL,2BCHR,EAAwB,CAACC,EAAKC,IAAUC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,GCAlF,EAAwB,KCAxBH,EAAoBQ,EAAIC,SAASC,SAAWC,KAAKC,SAASC,KCO1DC,OAAOC,iBAAiB,QAAQC,UAE9B,GAAKF,OAAOG,UAAUC,cAKf,CACLC,QAAQC,IACN,qFAUF,MAAMC,QAAYJ,UAAUC,cAAcI,SACxC,IAAIC,IAAI,kBAEV,GAAIF,EAAIG,WAAY,CAClB,MAAMC,EAAKJ,EAAIG,YAAcH,EAAIK,QACjCD,EAAGE,cAAgB,KACA,cAAbF,EAAGG,OACLd,OAAOF,SAASiB,eAGXR,EAAIS,QAKbC,YAAW,WACTjB,OAAOF,SAASiB,WACf,UA3CT,SAAsBG,GACpB,MAAMC,EAAWxB,SAASyB,eAAe,UACrCD,IACFA,EAASE,UAQP,sHADFC,O","file":"296-0990d6cdf2bf38121fdd.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + \"9c15ccd7d7771444c7fb\" + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","function updateStatus(message: string) {\n  const statusEl = document.getElementById('status');\n  if (statusEl) {\n    statusEl.innerText = message;\n  }\n}\n\nwindow.addEventListener('load', async () => {\n  // Verify user's web browser has necessary support\n  if (!window.navigator.serviceWorker) {\n    updateStatus(\n      `This web browser cannot interact with the Internet Computer securely.\n       Please try new web browser software.`,\n    );\n  } else {\n    console.log(\n      'Installing a service worker to proxy and validate raw content into the browser...',\n    );\n    // Ok, let's install the service worker...\n    // note: if the service worker was already installed, when the browser requested <domain>/, it would have\n    // proxied the response from <domain>/<canister-id>/, so this bootstrap file would never been\n    // retrieved from the boundary nodes\n\n    // Webpack recognizes this special syntax so it's okay to ignore that this isn't a string.\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const reg = await navigator.serviceWorker.register(\n      new URL('./sw/sw.ts', import.meta.url) as any,\n    );\n    if (reg.installing) {\n      const sw = reg.installing || reg.waiting;\n      sw.onstatechange = () => {\n        if (sw.state === 'installed') {\n          window.location.reload();\n        }\n      };\n    } else if (reg.active) {\n      // Hmmm we're not sure what's happening here. If the service worker was running, usually it\n      // would have obtained the underlying raw content from the canister, validated it, and proxied\n      // it to the browser. This might be either a disabled SW or the user did a hard reload on the\n      // page.\n      setTimeout(function() {\n        window.location.reload();\n      }, 800);\n    }\n  }\n});\n"],"sourceRoot":""}