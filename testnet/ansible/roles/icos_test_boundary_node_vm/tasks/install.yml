---

- name: create ic_router.js that imports all of the ic router tables for the ics
  vars:
    default_routing_value: "{{ default_routing | ternary(default_routing, (inventory_file | dirname | basename), 'mainnet') }}"
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "ic_router.js"
    dest: "/etc/nginx/ic_router.js"
    mode: "0644"
    owner: "root"
    group: "root"
  tags:
    - boundary_node_vm

- name: create a symbolic link for the ic network nginx.conf
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    src: "/etc/nginx/ic/nginx.conf"
    dest: "/etc/nginx/conf.d/{{ ic }}.conf"
    owner: root
    group: root
    state: link
  tags:
    - boundary_node_vm

- name: create templated ic_router_control_plane_watcher.sh for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "ic_router_control_plane_watcher.sh"
    dest: "/etc/nginx/ic/ic_router_control_plane_watcher.sh"
    mode: "0755"
    owner: "root"
    group: "root"
  register: ic_router_control_plane_watcher_sh
  tags:
    - boundary_node_vm

# This throws an error right now, need to figure out why
- name: Extract nns-url for icos_test
  block:
    - name: Get pre-configured nns-urls for icos-test deployment
      shell: "grep nns_url /boot/config/nns.conf | cut -f 2 -d="
      register: nns_urls

    - name: set nns-urls as local fact
      set_fact:
        nns_urls: "{{ nns_urls.stdout_lines[0]}}"
  tags:
    - boundary_node_vm

- name: create file boundary-node-control-plane service for ic network
  template:
    src: "boundary-node-control-plane.service"
    dest: "/lib/systemd/system/boundary-node-control-plane.service"
    owner: root
    group: root
    mode: 0644
  register: boundary_node_control_plane_service
  tags:
    - boundary_node_vm

- name: restart service boundary-node-control-plane for ic network
  service:
    daemon_reload: yes
    name: "boundary-node-control-plane"
    state: restarted
  when: boundary_node_control_plane_service.changed or boundary_node_control_plane.changed
  tags:
    - boundary_node_vm

- name: start service boundary-node-control-plane for ic network
  service:
    state: started
    enabled: yes
    name: "boundary-node-control-plane"
    daemon_reload: yes
  tags:
    - boundary_node_vm

- name: create file ic-router-control-plane-watcher for ic network
  template:
    src: "ic-router-control-plane-watcher.service"
    dest: "/lib/systemd/system/ic-router-control-plane-watcher.service"
    mode: "0644"
    owner: "root"
    group: "root"
  register: ic_router_control_plane_watcher
  tags:
    - boundary_node_vm

- name: start service ic-router-control-plane-watcher for ic network
  service:
    state: started
    enabled: yes
    name: "ic-router-control-plane-watcher"
    daemon_reload: yes
  tags:
    - boundary_node_vm

- name: stop and disable service icx-http-server.service
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  shell: "systemctl stop icx-http-server-{{ ic }}.service ; systemctl disable icx-http-server-{{ ic }}.service; true"
  tags:
    - boundary_node_vm

- name: remove older icx-http-server.service for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    path: "/lib/systemd/system/icx-http-server-{{ ic }}.service"
    state: absent
  tags:
    - boundary_node_vm

- name: touch router files
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  shell: "for route in /etc/nginx/ic_routes/*route*; do if [ -f $route ]; then touch $route ; fi ; done"

- name: check for dhparam.pem
  stat:
    path: "/etc/nginx/dhparam.pem"
  register: dhparam
  tags:
    - boundary_node_vm

- name: generate dhparam.pem if it does not exist
  # FLASHING WARNING SIGN
  #
  # This creates weak DH params. Creating a 4096 bit parameter set is
  # extremely slow and not required for test. `-dsaparam` also weakens the
  # params to increase speed.
  shell: "cd /etc/nginx ; /usr/bin/openssl dhparam -dsaparam -out dhparam.pem 2048"
  when: not dhparam.stat.exists

- name: generate trusted_certs.pem for ic network if it does not yet exist
  shell: "/usr/bin/cp -f /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/nginx/ic/trusted_certs.pem"
  tags:
    - boundary_node_vm

- name: nginx config test
  shell: "nginx -t"
  register: nginx_config_test
  tags:
    - boundary_node_vm

- name: start nginx
  service:
    name: nginx
    state: started
    daemon_reload: yes
  tags:
    - boundary_node_vm

- name: reload nginx
  service:
    name: nginx
    state: reloaded
    daemon_reload: yes
  tags:
    - boundary_node_vm

- name: restart service ic-router-control-plane-watcher for ic network
  service:
    name: "ic-router-control-plane-watcher"
    state: restarted
  tags:
    - boundary_node_vm
