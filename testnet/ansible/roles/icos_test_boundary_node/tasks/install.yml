---

- name: copy system nginx.conf file
  copy:
    src: "nginx.conf"
    dest: "/etc/nginx/nginx.conf"
    mode: "0644"
    owner: "root"
    group: "root"
  register: system_nginx_conf
  tags:
    - boundary_node

- name: copy mainnet service worker files
  copy:
    src: "service_worker"
    dest: "/var/www/html/"
    mode: "0755"
    owner: "www-data"
    group: "www-data"
  register: service_worker_files
  when: mainnet_service_worker
  tags:
    - boundary_node

- name: copy testnet service worker files
  copy:
    src: "../../boundary_node/files/testnet_service_worker/"
    dest: "/var/www/html/service_worker/"
    mode: "0755"
    owner: "www-data"
    group: "www-data"
  register: service_worker_files
  when: not mainnet_service_worker
  tags:
    - boundary_node

- name: remove the /etc/nginx/sites-enabled/nginx.conf
  file:
    state: absent
    path: /etc/nginx/sites-enabled/nginx.conf

- name: create certs directory under /etc/nginx
  file:
    state: directory
    path: "/etc/nginx/certs"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create keys directory under /etc/nginx
  file:
    state: directory
    path: "/etc/nginx/keys"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: copy system ic_public_key.pem file
  copy:
    src: "../../boundary_node/files/ic_public_key.pem"
    dest: "/etc/nginx/ic_public_key.pem"
    mode: "0644"
    owner: "root"
    group: "root"
  register: ic_public_key_pem
  tags:
    - boundary_node

- block:
    - name: create enable njs directory
      file:
        path: "/etc/nginx/modules-enabled"
        state: directory

    - name: enable njs module
      copy:
        dest: "/etc/nginx/modules-enabled/ngx_http_js_module.conf"
        content: |
          load_module "modules/ngx_http_js_module.so";
        mode: "0644"
        owner: "root"
        group: "root"
      tags:
        - boundary_node

- name: enable cbor-input and ndk modules
  copy:
    dest: "/etc/nginx/modules-enabled/ngx_http_cbor_input_module.conf"
    content: |
      load_module "modules/ndk_http_module.so";
      load_module "modules/ngx_http_cbor_input_module.so";
    mode: "0644"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create directory under /etc/nginx for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    state: directory
    path: "/etc/nginx/ic_networks/{{ ic }}"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: copy denylist file
  copy:
    src: "denylist.map"
    dest: "/etc/nginx/denylist.map"
    mode: "0644"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: copy boundary-node-control-plane for icos_test
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  copy:
    src: "/opt/dfinity/boundary-node-control-plane"
    dest: "/etc/nginx/ic_networks/{{ ic }}/boundary-node-control-plane"
    mode: "0755"
    owner: "root"
    group: "root"
    remote_src: yes
  register: boundary_node_control_plane
#  notify: restart service boundary_node
  tags:
    - boundary_node

- name: copy boundary-node-prober for icos_test
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  copy:
    src: "/opt/dfinity/boundary-node-prober"
    dest: "/etc/nginx/ic_networks/{{ ic }}/boundary-node-prober"
    mode: "0755"
    owner: "root"
    group: "root"
    remote_src: yes
  register: boundary_node_prober
#  notify: restart service boundary_node
  tags:
    - boundary_node

- name: create templated nginx.conf for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/nginx.conf"
    dest: "/etc/nginx/ic_networks/{{ ic }}/nginx.conf"
    mode: "0644"
    owner: "root"
    group: "root"
  register: network_nginx_conf
  tags:
    - boundary_node

- name: check for ic_router_table.js for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  stat:
    path: "/etc/nginx/ic_networks/{{ ic }}/ic_router_table.js"
  register: ic_router_table
  tags:
    - boundary_node

- name: create templated ic_router_table.js for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "ic_router_table.js"
    dest: "/etc/nginx/ic_networks/{{ ic }}/ic_router_table.js"
    mode: "0644"
    owner: "root"
    group: "root"
  when: not ic_router_table.stat.exists
  tags:
    - boundary_node

- name: enumerate the ic-router-table.js files and build list of ic networks that have them
  shell: "ls -1 /etc/nginx/ic_networks/*/ic_router_table.js | xargs -L1 dirname | xargs -L1 basename"
  register: ics_with_ic_router_tables
  tags:
    - boundary_node

- name: check for nginx_table.config for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  stat:
    path: "/etc/nginx/ic_networks/{{ ic }}/nginx_table.conf"
  register: nginx_table
  tags:
    - boundary_node

- name: create templated nginx_table.conf for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/nginx_table.conf"
    dest: "/etc/nginx/ic_networks/{{ ic }}/nginx_table.conf"
    mode: "0644"
    owner: "root"
    group: "root"
  when: not nginx_table.stat.exists
  tags:
    - boundary_node

- name: copy denylist file
  copy:
    src: "denylist.map"
    dest: "/etc/nginx/denylist.map"
    mode: "0644"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create ic_router.js that imports all of the ic router tables for the ics
  vars:
    default_routing_value: "{{ default_routing | ternary(default_routing, (inventory_file | dirname | basename), 'mainnet') }}"
    ics: "{{ ics_with_ic_router_tables.stdout_lines }}"
  template:
    src: "../../boundary_node/templates/ic_router.js"
    dest: "/etc/nginx/ic_router.js"
    mode: "0644"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create templated 000-nginx-global.conf for ic network
  template:
    src: "000-nginx-global.conf"
    dest: "/etc/nginx/conf.d/000-nginx-global.conf"
    mode: "0644"
    owner: "root"
    group: "root"
  register: nginx_global
  tags:
    - boundary_node

- name: remove the old /etc/nginx/conf.d/nginx-global.conf
  file:
    state: absent
    path: /etc/nginx/conf.d/nginx-global.conf
  tags:
    - boundary_node


- name: create a symbolic link for the ic network nginx.conf
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    src: "/etc/nginx/ic_networks/{{ ic }}/nginx.conf"
    dest: "/etc/nginx/conf.d/{{ ic }}.conf"
    owner: root
    group: root
    state: link
  tags:
    - boundary_node

- name: create templated ic_router_control_plane.py for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/ic_router_control_plane.py"
    dest: "/etc/nginx/ic_networks/{{ ic }}/ic_router_control_plane.py"
    mode: "0755"
    owner: "root"
    group: "root"
  register: ic_router_control_plane_py
  tags:
    - boundary_node

- name: create templated ic_router_control_plane_watcher.sh for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/ic_router_control_plane_watcher.sh"
    dest: "/etc/nginx/ic_networks/{{ ic }}/ic_router_control_plane_watcher.sh"
    mode: "0755"
    owner: "root"
    group: "root"
  register: ic_router_control_plane_watcher_sh
  tags:
    - boundary_node

- name: create directory /etc/nginx/ic_routes
  file:
    state: directory
    path: "/etc/nginx/ic_routes"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create directory under /etc/nginx/ic_routes for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    state: directory
    path: "/etc/nginx/ic_routes/{{ ic }}"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create directory /etc/nginx/ic_wallets
  file:
    state: directory
    path: "/etc/nginx/ic_wallets"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create directory under /etc/nginx/ic_wallets for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    state: directory
    path: "/etc/nginx/ic_wallets/{{ ic }}"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: copy wallets file
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  copy:
    src: "../../boundary_node/files/ic.wallets"
    dest: "/etc/nginx/ic_wallets/{{ ic }}/"
    mode: "0644"
    owner: "root"
    group: "root"
  register: ic_wallets
  tags:
    - boundary_node

- name: copy identity files
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  copy:
    src: "../../boundary_node/files/identity.pem"
    dest: "/etc/nginx/ic_wallets/{{ ic }}/"
    mode: "0755"
    owner: "root"
    group: "root"
  register: identity_pem
  tags:
    - boundary_node

- name: create cache directory /var/cache/nginx
  file:
    state: directory
    path: "/var/cache/nginx/ic"
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - boundary_node

- name: create directory under /var/cache/nginx for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    state: directory
    path: "/var/cache/nginx/ic/{{ ic }}"
    mode: "0750"
    owner: "www-data"
    group: "www-data"
  tags:
    - boundary_node

- name: Extract nns-url for icos_test
  block:
    - name: Get pre-configured nns-urls for icos-test deployment
      shell: "grep nns_url /boot/config/nns.conf | cut -f 2 -d="
      register: nns_urls

    - name: set nns-urls as local fact
      set_fact:
        nns_urls: "{{ nns_urls.stdout_lines[0]}}"
  tags:
    - boundary_node

- name: create file boundary-node-control-plane service for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/boundary-node-control-plane.service"
    dest: "/lib/systemd/system/boundary-node-control-plane-{{ ic }}.service"
    owner: root
    group: root
    mode: 0644
  register: boundary_node_control_plane_service
  tags:
    - boundary_node

- name: restart service boundary-node-control-plane for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    daemon_reload: yes
    name: "boundary-node-control-plane-{{ ic }}"
    state: restarted
  when: boundary_node_control_plane_service.changed or boundary_node_control_plane.changed
  tags:
    - boundary_node

- name: start service boundary-node-control-plane for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    state: started
    enabled: yes
    name: "boundary-node-control-plane-{{ ic }}"
    daemon_reload: yes
  tags:
    - boundary_node

- name: create file boundary-node-prober service for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/boundary-node-prober.service"
    dest: "/lib/systemd/system/boundary-node-prober-{{ ic }}.service"
    owner: root
    group: root
    mode: 0644
  register: boundary_node_prober_service
  tags:
    - boundary_node

- name: restart service boundary-node-prober for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    daemon_reload: yes
    name: "boundary-node-prober-{{ ic }}"
    state: restarted
  when: boundary_node_prober_service.changed or boundary_node_prober.changed
  tags:
    - boundary_node

- name: start service boundary-node-prober for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    state: started
    enabled: yes
    name: "boundary-node-prober-{{ ic }}"
    daemon_reload: yes
  tags:
    - boundary_node

- name: create file ic-router-control-plane-watcher for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  template:
    src: "../../boundary_node/templates/ic-router-control-plane-watcher.service"
    dest: "/lib/systemd/system/ic-router-control-plane-watcher-{{ ic }}.service"
    mode: "0644"
    owner: "root"
    group: "root"
  register: ic_router_control_plane_watcher
  tags:
    - boundary_node

- name: restart service ic-router-control-plane-watcher for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    name: "ic-router-control-plane-watcher-{{ ic }}"
    state: restarted
    daemon_reload: yes
  when: ic_router_control_plane_watcher.changed or ic_router_control_plane_py.changed or ic_router_control_plane_watcher_sh.changed or boundary_node_control_plane.changed
  tags:
    - boundary_node

- name: start service ic-router-control-plane-watcher for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    state: started
    enabled: yes
    name: "ic-router-control-plane-watcher-{{ ic }}"
    daemon_reload: yes
  tags:
    - boundary_node

- name: stop and disable service icx-http-server.service
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  shell: "systemctl stop icx-http-server-{{ ic }}.service ; systemctl disable icx-http-server-{{ ic }}.service; true"
  tags:
    - boundary_node

- name: remove older icx-http-server.service for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  file:
    path: "/lib/systemd/system/icx-http-server-{{ ic }}.service"
    state: absent
  tags:
    - boundary_node

- name: touch router files
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  shell: "for route in /etc/nginx/ic_routes/{{ ic }}/*route*; do if [ -f $route ]; then touch $route ; fi ; done"

- name: create rules.v4
  file:
    path: "/etc/iptables/rules.v4"
    state: absent
  tags:
    - boundary_node

- name: create rules.v6
  file:
    path: "/etc/iptables/rules.v6"
    state: absent
  tags:
    - boundary_node

- name: check for dhparam.pem
  stat:
    path: "/etc/nginx/dhparam.pem"
  register: dhparam
  tags:
    - boundary_node

- name: generate dhparam.pem if it does not exist
  # FLASHING WARNING SIGN
  #
  # This creates weak DH params. Creating a 4096 bit parameter set is
  # extremely slow and not required for test. `-dsaparam` also weakens the
  # params to increase speed.
  shell: "cd /etc/nginx ; /usr/bin/openssl dhparam -dsaparam -out dhparam.pem 2048"
  when: not dhparam.stat.exists

- name: check for ic network trusted_certs.pem
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  stat:
    path: "/etc/nginx/ic_networks/{{ ic }}/trusted_certs.pem"
  register: trusted_certs

- name: generate trusted_certs.pem for ic network if it does not yet exist
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  shell: "/usr/bin/cp -f /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/nginx/ic_networks/{{ ic }}/trusted_certs.pem"
  when: (not trusted_certs.stat.exists) or (trusted_certs.stat.size == 0)
  tags:
    - boundary_node

- name: remove /etc/nginx/conf.d/default.conf if it exists
  file:
    path: /etc/nginx/conf.d/default.conf
    state: absent
  tags:
    - boundary_node

- name: remove /etc/nginx/sites-enabled/default if it exists
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  tags:
    - boundary_node

- name: remove /etc/nginx/conf.d/default if it exists
  file:
    path: /etc/nginx/conf.d/default
    state: absent
  tags:
    - boundary_node

- name: nginx config test
  shell: "nginx -t"
  register: nginx_config_test
  tags:
    - boundary_node

- name: restart nginx
  service:
    name: nginx
    state: restarted
    daemon_reload: yes
  tags:
    - boundary_node

- name: restart service ic-router-control-plane-watcher for ic network
  vars:
    ic: "{{ inventory_file | dirname | basename }}"
  service:
    name: "ic-router-control-plane-watcher-{{ ic }}"
    state: restarted
  tags:
    - boundary_node
