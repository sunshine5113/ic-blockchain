syntax = "proto3";

package bitcoin.v1;

message Transaction {
  int32 version = 1;
  uint32 lock_time = 2;
  repeated TxIn input = 3;
  repeated TxOut output = 4;
}

message TxIn {
  OutPoint previous_output = 1;
  bytes script_sig = 2;
  uint32 sequence = 3;
  repeated bytes witness = 4;
}

message TxOut {
  uint64 value = 1;
  bytes script_pubkey = 2;
}

message OutPoint {
  bytes txid = 1;
  uint32 vout = 2;
}

message BlockHeader {
  int32 version = 1;
  bytes prev_blockhash = 2;
  bytes merkle_root = 3;
  uint32 time = 4;
  uint32 bits = 5;
  uint32 nonce = 6;
}

message Block {
  BlockHeader header = 1;
  repeated Transaction txdata = 2;
}

message GetSuccessorsRequest {
  // Used by the adapter to filter out previously sent blocks from its
  // `GetSuccessorsResponse`. 
  repeated bytes processed_block_hashes = 1;
  // The first hash in processed block hashes. This field is used by the adapter
  // to start a breadth-first search its known headers to determine which blocks
  // to respond with in `GetSuccessorsResponse::blocks` field.
  bytes anchor = 2;
}

message GetSuccessorsResponse {
  // The blocks that the adapter has knowledge of based on the anchor and processed
  // block hashes provided in the `GetSuccessorsRequest`.
  repeated Block blocks = 1;
  // The next block headers that used to notify the Bitcoin virtual canister that
  // more blocks are available.
  repeated BlockHeader next = 2;
}

message SendTransactionRequest {
  bytes raw_tx = 1;
}

message SendTransactionResponse {};
