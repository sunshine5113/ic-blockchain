syntax = "proto3";

package bitcoin.v1;

message Transaction {
  int32 version = 1;
  uint32 lock_time = 2;
  repeated TxIn input = 3;
  repeated TxOut output = 4;
}

message TxIn {
  OutPoint previous_output = 1;
  bytes script_sig = 2;
  uint32 sequence = 3;
  repeated bytes witness = 4;
}

message TxOut {
  uint64 value = 1;
  bytes script_pubkey = 2;
}

message OutPoint {
  bytes txid = 1;
  uint32 vout = 2;
}

message BlockHeader {
  int32 version = 1;
  bytes prev_blockhash = 2;
  bytes merkle_root = 3;
  uint32 time = 4;
  uint32 bits = 5;
  uint32 nonce = 6;
}

message Block {
  BlockHeader header = 1;
  repeated Transaction txdata = 2;
}

message GetSuccessorsRequest {
  // Used by the adapter to filter out previously sent blocks from its
  // `GetSuccessorsResponse`. 
  repeated bytes processed_block_hashes = 1;
  // The first hash in processed block hashes. This field is used by the adapter
  // to start a breadth-first search its known headers to determine which blocks
  // to respond with in `GetSuccessorsResponse::blocks` field.
  bytes anchor = 2;
}

message GetSuccessorsResponse {
  // The blocks that the adapter has knowledge of based on the anchor and processed
  // block hashes provided in the `GetSuccessorsRequest`.
  repeated Block blocks = 1;
  // The next block headers that used to notify the Bitcoin virtual canister that
  // more blocks are available.
  repeated BlockHeader next = 2;
}

message SendTransactionRequest {
  bytes transaction = 1;
}

message SendTransactionResponse {};

// Wraps the different types of requests to the Bitcoin Adapter.
message BitcoinAdapterRequestWrapper {
  oneof r {
    GetSuccessorsRequest get_successors_request = 1;
    SendTransactionRequest send_transaction_request = 2;
  }
}

// Wraps the different types of responses from the Bitcoin Adapter.
message BitcoinAdapterResponseWrapper {
  oneof r {
    GetSuccessorsResponse get_successors_response = 1;
    SendTransactionResponse send_transaction_response = 2;
  }
}

// A Bitcoin Adapter request, used to store the requests in the
// `ReplicatedState`.
message BitcoinAdapterRequest {
  // The wrapped Bitcoin request to the Adapter.
  BitcoinAdapterRequestWrapper request = 1;
  // The callback id associated with this request. Useful to match it against
  // the incoming responses.
  uint64 callback_id = 2;
}

// A Bitcoin Adapter response, used to store the responses in the
// `ReplicatedState`.
message BitcoinAdapterResponse {
  // The wrapped Bitcoin response from the Adapter.
  BitcoinAdapterResponseWrapper response = 1;
  // The callback id associated with this response. Used to match a response
  // against its corresponding request.
  uint64 callback_id = 2;
}

message AdapterQueues {
  // Tracks the callback id that will be generated for the next request.
  // Used to match incoming responses to existing requests.
  uint64 next_callback_id = 1;
  // Queue of outgoing requests to the Bitcoin Adapter.
  repeated BitcoinAdapterRequest requests = 2;
  // Queue of incoming responses from the Bitcoin Adapter.
  repeated BitcoinAdapterResponse responses = 3;
  // Capacity of the queue of outgoing requests.
  uint32 requests_queue_capacity = 4;
}

message UnstableBlocks {
  uint32 stability_threshold = 1;
  BlockTree tree = 2;
}

message BlockTree {
  Block root = 1;
  repeated BlockTree children = 2;
}

message Utxo {
  OutPoint outpoint = 1;
  TxOut txout = 2;
  uint32 height = 3;
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_TESTNET = 1;
  NETWORK_MAINNET = 2;
  NETWORK_REGTEST = 3;
}

// Represents the Bitcoin state that isn't stored in PageMaps.
message BitcoinStateBits {
  // The queues that maintain the requests to and responses from the Bitcoin
  // Adapter.
  AdapterQueues adapter_queues = 1;

  UnstableBlocks unstable_blocks = 2;

  uint32 stable_height = 3;

  Network network = 4;

  repeated Utxo utxos_large = 5;
}
