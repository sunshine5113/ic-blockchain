self: super: with self.lib;

{
  documentWorkspace = allTheCrates: self.runCommandNoCC "workspace-docs" {
    crates = flatten (mapAttrsToList (name: crate: [ (builtins.replaceStrings [ "-" ] [ "_" ] name) crate ]) allTheCrates);
    buildInputs = [ self.cargo self.jq self.rsync ];

    # source paths are all remapped during the build, so the documentation derivation
    # should have no dependencies :)
    allowedRequisites = [];
  } ''
    # rustdoc has all of its UI files (like settings.html, the CSS, the search implementation, etc)
    # bundled along with the executable. instead of manually copying everything over, we just run
    # `cargo doc` on a fake crate, then remove all the references to it afterwards, so if rustdoc
    # adds new assets in the future we get them for free without needing to update this script.
    mkdir src
    touch src/lib.rs
    cat >Cargo.toml <<EOF
    [package]
    name = "generate-rustdoc-files"
    version = "0.8.0"
    EOF

    crates=($crates)

    # all the utility functions in cargo2nix (specifically in this case, linkRustdocs, which is used below)
    # take an array of the form:
    # [dep1 /nix/store/path-to-dep1 dep2 /nix/store/path-to-dep2 ...]
    # so we iterate through all the dependencies and
    #   1) add to the crateList array, in the format linkRustdocs expects
    #   2) add a row to the "$crates_table" table, which is substituted into the index.html template
    crateList=()
    export crates_table=""

    find_crates() {
      for (( i = 1; i < $#; i += 2 )); do
        local extern_name="''${@:$i:1}"
        local crate="''${@:((i+1)):1}"

        # some crates in our workspace (like rust canisters and test libraries) don't produce any
        # documentation, because they have no default library target. in cargo2nix, passing in a
        # dependency with a missing doc directory throws an error because it assumes the doc
        # generation failed. in this case, though, no docs is fine, so we just skip.
        if [ ! -e "$crate/share/doc/$extern_name" ]; then
          continue
        fi

        crateList+=("$extern_name" "$crate")
        crates_table+="<tr class='module-item'><td><a href='./$extern_name/index.html' class='mod'>$(jq -r .name $crate/.cargo-info)</a></td></tr>"
      done
    }

    find_crates "''${crates[@]}"

    source ${./cargo2nix}/overlay/utils.sh

    mkdir -p target/doc

    echo >&2 linking workspace docs into ./target/doc
    linkRustdocs target "''${crateList[@]}"

    cargo doc

    # remove references to the fake crate
    rm -rf target/doc/src/generate_rustdoc_files target/doc/generate_rustdoc_files

    # linkRustdocs creates a big symlink tree, which saves a lot of disk space. however, we want
    # the doc output to be fully self-contained, so we use rsync -L to follow the symlinks and copy
    # their contents.
    echo >&2 resolving all the symlinks
    mkdir -p $out/share/doc
    rsync -La target/doc/ $out/share/doc

    substitute ${./rustdoc.html} $out/share/doc/index.html --subst-var crates_table

    # the search-index.js file is used to populate the sidebar that you see in pages generated by
    # rustdoc. (i.e. with JS disabled the sidebar would be empty). we delete the fake crate so it
    # doesn't show up in the sidebar
    sed -i '/^"generate_rustdoc_files/d' $out/share/doc/search-index.js

    mkdir -p $out/nix-support
    echo "report cargo-doc-ic $out share/doc/index.html" >> $out/nix-support/hydra-build-products
  '';
}
