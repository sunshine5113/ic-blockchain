(*
  Policy: The num of finalized block proposals created by a node in a window
  of 1 day [must not be] more than 2 standard deviations off the average (block
  "fairness").

  This policy is checked from the perspective of *every node* in a subnet, i.e.,
  using the observations made by that node of block proposals created by other
  nodes.

  TODO(JS):
  - What about the "added proposal to artifact pool" event? Is that emitted by
    the creator itself?

  Relevant events:
  - p2p__originally_in_subnet(node_addr:string, node_addr:string, subnet_id:string)
  - registry__node_added_to_subnet(node_id:string, node_addr:string, subnet_id:string)
  - registry__node_removed_from_subnet(node_id:string, node_addr:string)
  - p2p__node_added(node_id:string, subnet_id:string, added_node_id:string)
  - p2p__node_removed(node_id:string, subnet_id:string, removed_node_id:string)
  - move_block_proposal(node_id:string,
                        subnet_id:string,
                        block_hash:string,
                        signer:string)
  - deliver_batch(node_id:string, subnet_id:string, block_hash:string)

  Assumptions:
  - A node moves a signed proposal at most once to its artifact pool.
  - move_block_proposal precedes deliver_batch, and they are not more than 600s
    apart.
    YAP: We assume that every DKG interval (set to 100 rounds in NNS and 500
    rounds in other subnets) at least one finalization happens which translates
    into a bound of ~500 seconds between creation and delivery.
*)

LET registry_subnet_map(node, subnet) = ((NOT registry__node_removed_from_subnet(node, _)) SINCE (p2p__originally_in_subnet(node, _, subnet) OR (registry__node_added_to_subnet(node, _, subnet) AND NOT PREVIOUS ((NOT registry__node_removed_from_subnet(node, _)) SINCE registry__node_added_to_subnet(node, _, subnet))))) IN
LET subnet_map(node, subnet) = registry_subnet_map(node, subnet) IN
LET num_subnet_nodes(subnet, n) = n <- CNT node; subnet subnet_map(node, subnet) IN

LET deliver_block_proposal(reporting_node, subnet, block_hash, signer) =
  move_block_proposal(reporting_node, subnet, block_hash, signer)
  AND EVENTUALLY [0,600000]  (* 600s in milliseconds; 600*1000 = 600000 *)
    deliver_batch(reporting_node, subnet, block_hash)
IN
LET num_created_one_day_raw(reporting_node, subnet, signer, n) =
  n <- CNT block_hash; reporting_node, subnet, signer
    ONCE [0, 86400000)  (* One day in milliseconds; 24*60*60*1000 = 86400000 *)
      deliver_block_proposal(reporting_node, subnet, block_hash, signer)
IN
LET num_created_one_day(reporting_node, subnet, signer, n) =
  num_created_one_day_raw(reporting_node, subnet, signer, n)
  OR (subnet_map(reporting_node, subnet)
      AND subnet_map(signer, subnet)
      AND NOT num_created_one_day_raw(reporting_node, subnet, signer, _)
      AND n = 0)
IN

LET avg_created_one_day(reporting_node, subnet, a) =
  a <- AVG n; reporting_node, subnet
    num_created_one_day(reporting_node, subnet, node, n)
IN
(* Population variance: *)
LET sqsum_created_one_day(reporting_node, subnet, s) =
  s <- SUM nsq; reporting_node, subnet
    (EXISTS n. num_created_one_day(reporting_node, subnet, signer, n)
               AND nsq = n * n)
IN
LET varp_created_one_day(reporting_node, subnet, v) =
  EXISTS a, b, n.
    avg_created_one_day(reporting_node, subnet, a)
    AND sqsum_created_one_day(reporting_node, subnet, b)
    AND num_subnet_nodes(subnet, n)
    AND v = (i2f(b) / i2f(n)) - (a * a)
IN

num_created_one_day(reporting_node, subnet, creating_node, n_created)
AND avg_created_one_day(reporting_node, subnet, avg_created)
AND varp_created_one_day(reporting_node, subnet, var_created)
AND (i2f(n_created) - avg_created) * (i2f(n_created) - avg_created)
    > 4.0 * var_created  (* variance = stddev^2 *)
