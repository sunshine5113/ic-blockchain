(*
  Policy: No node spends more than 10% more time per day than the average node
  [in the same subnet] in catching up state.

  Definition - catching up state: either state or DKG key material is
  unavailable when the consensus module declares consensus finalized.

  Relevant events:
  - p2p__originally_in_subnet(node_addr:string, node_addr:string, subnet_id:string)
  - registry__node_added_to_subnet(node_id:string, node_addr:string, subnet_id:string)
  - registry__node_removed_from_subnet(node_id:string, node_addr:string)
  - p2p__node_added(node_id:string, subnet_id:string, added_node_id:string)
  - p2p__node_removed(node_id:string, subnet_id:string, removed_node_id:string)
  - consensus_finalized(node_id:string,
                        subnet_id:string,
                        state_avail:int,   -- boolean
                        key_avail:int)     -- boolean

  - Note: There should be regular events (e.g., every hour) to drive the
    computation forward.

  Encoding of boolean parameters: 0 = false, 1 = true
*)

LET registry_subnet_map(node, subnet) = ((NOT registry__node_removed_from_subnet(node, _)) SINCE (p2p__originally_in_subnet(node, _, subnet) OR (registry__node_added_to_subnet(node, _, subnet) AND NOT PREVIOUS ((NOT registry__node_removed_from_subnet(node, _)) SINCE registry__node_added_to_subnet(node, _, subnet))))) IN
LET subnet_map(node, subnet) = registry_subnet_map(node, subnet) IN
LET up_to_date(node, subnet) = consensus_finalized(node, subnet, 1, 1) IN
LET node_already_up_to_date(node, subnet) = PREVIOUS (subnet_map(node, subnet) SINCE up_to_date(node, subnet)) IN
LET catching_up(node, subnet) =
  EXISTS state, key. consensus_finalized(node, subnet, state, key)
                     AND state + key < 2
IN
LET enter_sync(node, subnet, start_time) =
  catching_up(node, subnet)
  AND NOT (PREVIOUS ((NOT up_to_date(node, subnet))
                     SINCE catching_up(node, subnet)))
  AND ts(start_time)
IN

(*
  There are four cases, depending on whether entering/leaving the sync state
  happens strictly outside of/non-strictly within the 24h window.
*)

(* Case 1: Entered state before window and has not left it yet. *)
LET sync_before_ongoing(node, subnet, time) =
  ((NOT up_to_date(node, subnet)) 
  SINCE [86400000, *]  (* 24h = 24*60*60*1000 = 86400000 *)
    catching_up(node, subnet)
  ) AND time = 86400000
IN
(* Case 2: Entered state within window and has not left it yet. *)
LET sync_within_ongoing(node, subnet, time) =
  EXISTS start, now.
    ((NOT up_to_date(node, subnet))
     SINCE [0, 86400000)
      enter_sync(node, subnet, start))
    AND ts(now) AND time = now - start
IN

(* Cases 3&4: Sync state has been left within window. *)
LET sync_complete_aux(node, subnet, end, start) =
  ONCE [0,86400000)
    up_to_date(node, subnet)
    AND ts(end)
    AND PREVIOUS ((NOT up_to_date(node, subnet))
                  SINCE enter_sync(node, subnet, start))
IN
LET sync_complete(node, subnet, time) =
  EXISTS end, start, now.
    (sync_complete_aux(node, subnet, end, start)
     AND ts(now) AND start <= now - 86400000 AND time = end - (now - 86400000))
    OR (sync_complete_aux(node, subnet, end, start)
     AND ts(now) AND start > now - 86400000 AND time = end - start)
IN

LET time_spent_in_sync_one_day(node, subnet, time) =
  time <- SUM t; node, subnet
    ((sync_before_ongoing(node, subnet, t)
     OR sync_within_ongoing(node, subnet, t)
     OR sync_complete(node, subnet, t)
     OR subnet_map(node, subnet) AND t = 0)
    AND node_already_up_to_date(node, subnet))
IN
LET sync_stats(subnet, avg, node, node_time) =
  (avg <- AVG time; subnet time_spent_in_sync_one_day(node, subnet, time))
  AND time_spent_in_sync_one_day(node, subnet, node_time)
IN
sync_stats(subnet, avg, node, node_time) AND i2f(node_time) > 1.1 * avg
