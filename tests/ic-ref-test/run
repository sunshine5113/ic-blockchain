#!/usr/bin/env bash
# vim: set ft=bash
set -euo pipefail

# We recreate a `TMPDIR` For the sake of people not using the sandbox, because
# `application` litters `TMPDIR` with files and doesn't clean up
TMPDIR=$(mktemp -d)
export TMPDIR

starter_pid_file=$(mktemp)
readonly starter_pid_file

function kill_all() {
    if [[ -f "$starter_pid_file" ]]; then
        # We don't print anything here because this function is called
        # on PIPE signal, so trying to output anything might cause an
        # infinite loop.
        kill "$(cat "$starter_pid_file")"
        unlink "$starter_pid_file"
    fi

    # Show the last lines of the replica output (create if necessary)
    echo >>replica.stdout
    echo >>replica.stderr
    tail -n 500 replica.stdout replica.stderr

    rm -f endpoint.txt
    rm -rf "$TMPDIR/ic_crypto"
}

function wait_for_port() {
    local -i port="$1"
    local -i retries=0
    local -i max=20
    while ! nc -z 127.0.0.1 "$port"; do
        if [[ $retries -lt $max ]]; then
            retries=$((retries + 1))
            echo "waiting for server to accept connections at $port"
            sleep 1
        else
            echo "Server did not accept connection after $retries retries."
            exit 1
        fi
    done
}

readonly URI_REGEX='^(([^:/?#]+):)?(//((([^:/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?(/([^?#]*))(\?([^#]*))?(#(.*))?'
parse_port() {
    [[ "$1" =~ $URI_REGEX ]] && echo "${BASH_REMATCH[9]}"
}

function start_replica() {
    local arg=""
    if [ "$USE_APP_SUBNET" = true ]; then arg=--use-app-subnet; fi
    ic-test-bin \
        --endpoint endpoint.txt \
        $arg \
        >replica.stdout 2>replica.stderr &
    local -ir starter_pid=$!

    echo $starter_pid >"$starter_pid_file"

    echo "Started ic-test-bin with PID $starter_pid"

    # print logs while starting up, less boring
    tail -F replica.stdout replica.stderr &
    local -ir tail_pid=$!

    local -i retries=0
    local -i max=3600 # large, to allow building NNS canisters
    while ! [ -f endpoint.txt ]; do
        if [[ $retries -lt $max ]]; then
            if ! kill -s 0 "$starter_pid"; then
                kill "$tail_pid"
                echo "Looks like ic-test-bin died!"
                exit 1
            fi

            echo "Waiting for ic-test-bin to open port (since ${retries}s)"
            retries=$((retries + 10))
            sleep 10
        else
            kill "$tail_pid"
            echo "Could not connect to the server after $max seconds"
            exit 1
        fi
    done

    kill "$tail_pid"

    replica_address="$(cat endpoint.txt)"
    replica_port="$(parse_port "$replica_address")"
    echo "Replica is up and running at $replica_address, i.e. port $replica_port"
}

trap kill_all EXIT PIPE
start_replica

endpoint="http://127.0.0.1:$replica_port"

excludes="(1 == 0)" # to start with something that is always false
function exclude() {
    echo "Excluding tests matching $1"
    excludes+=" || \$0 ~ /$1/"
}

# In the following we disable some tests; some only for certain spec versions
# Use any substring of the full test name, which is the test group names and
# the test name concatenated with dots

# ic-ref-test assumes that the Internet Computer will reject signatures with an
# expiry that is absurdly far in the future. The replica does not enforce that
# for query calls, so let’s disable that.
exclude "signature checking.with expiry in the future.in query"
exclude "signature checking.with expiry in the future.in request status"
exclude "signature checking.with expiry in the future.in empty read state request"

# Certification is specified in a way that `read_state` returns non-existance proofs.
# This is not implemented yet.
exclude "non-existence proofs for non-existing request id"
exclude "module_hash of empty canister"

# Authenticating the use of read_state curently does not heed the target restrictions
# in the request delegation.
excludes+=" || (\$2 ~ /Delegation targets/ && \$4 ~ /in read_state/)"

# the replica does not yet check that the effective canister id is valid
exclude "wrong url path"
exclude "wrong effective canister id"
exclude "access denied two status to different canisters"

# In the replica, contexts marked as “deleted” (due to `canister_uninstall` or
# running out of cycles) currently still block the transition from stopping to
# stopped.
exclude "deleted call contexts do not prevent stopping"

# these tests do not work on a non-NNS-subnet because the replica does not allow
# subnet delegations in Canister Signatures. The Interface Spec needs to be expanded
# to make subnet delegations include the canister range to make this secure; then the
# replica can drop that requirement.
if [ "$USE_APP_SUBNET" = true ]; then
    exclude "Canister signatures"
fi

# the -j64 in the following does not indicate CPU usage. It is rather
# the number of tests to run in parallel, but test mostly just wait for the
# replica... so this more or less indicates the number of message to put in each block

ic-ref-test \
    --pattern "!($excludes)" \
    -j64 \
    --hide-successes --color always --ansi-tricks false \
    --html report.html \
    --xml ic-ref-test.xml \
    --endpoint "$endpoint"
