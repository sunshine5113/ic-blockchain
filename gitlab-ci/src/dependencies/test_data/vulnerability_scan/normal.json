{
    "modified_crates": [
        "memory_tracker:0.8.0"
    ],
    "vulnerable_crates": [
        "regex:1.5.4",
        "thread_local:1.0.1"
    ],
    "vulnerability_scan": {
        "ic-base-types:0.8.0": [
            {
                "package_name": "ic-base-types:0.8.0",
                "codeowner": "('TEAM', '@dfinity-lab/teams/interface-owners')",
                "vulnerable_dependency": {
                    "name": "regex",
                    "version": "1.5.4",
                    "owner": [],
                    "is_external": true
                },
                "reason": "Regexes with large repetitions on empty sub-expressions take a very long time to parse The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                "fix": [
                    ">=1.5.5"
                ],
                "is_vulnerable_dependency_direct": false,
                "direct_dependency": {
                    "name": "candid",
                    "version": "0.7.14",
                    "owner": [],
                    "is_external": true
                },
                "dependency_chain": [
                    "docopt:1.1.0",
                    "lalrpop:0.19.0",
                    "candid:0.7.14"
                ],
                "risk_rating": "RiskRating.HIGH"
            }
        ],
        "ic-protobuf:0.8.0": [
            {
                "package_name": "ic-protobuf:0.8.0",
                "codeowner": "",
                "vulnerable_dependency": {
                    "name": "regex",
                    "version": "1.5.4",
                    "owner": [],
                    "is_external": true
                },
                "reason": "Regexes with large repetitions on empty sub-expressions take a very long time to parse The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                "fix": [
                    ">=1.5.5"
                ],
                "is_vulnerable_dependency_direct": false,
                "direct_dependency": {
                    "name": "candid",
                    "version": "0.7.14",
                    "owner": [],
                    "is_external": true
                },
                "dependency_chain": [
                    "docopt:1.1.0",
                    "lalrpop:0.19.0",
                    "candid:0.7.14"
                ],
                "risk_rating": "RiskRating.HIGH"
            }
        ],
        "phantom_newtype:0.8.0": [
            {
                "package_name": "phantom_newtype:0.8.0",
                "codeowner": "",
                "vulnerable_dependency": {
                    "name": "regex",
                    "version": "1.5.4",
                    "owner": [],
                    "is_external": true
                },
                "reason": "Regexes with large repetitions on empty sub-expressions take a very long time to parse The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                "fix": [
                    ">=1.5.5"
                ],
                "is_vulnerable_dependency_direct": false,
                "direct_dependency": {
                    "name": "candid",
                    "version": "0.7.14",
                    "owner": [],
                    "is_external": true
                },
                "dependency_chain": [
                    "docopt:1.1.0",
                    "lalrpop:0.19.0",
                    "candid:0.7.14"
                ],
                "risk_rating": "RiskRating.HIGH"
            }
        ],
        "ic-logger:0.8.0": [
            {
                "package_name": "ic-logger:0.8.0",
                "codeowner": "",
                "vulnerable_dependency": {
                    "name": "thread_local",
                    "version": "1.0.1",
                    "owner": [],
                    "is_external": true
                },
                "reason": "Data race in `Iter` and `IterMut` In the affected version of this crate, `{Iter, IterMut}::next` used a weaker memory ordering when loading values than what was required, exposing a potential data race\nwhen iterating over a `ThreadLocal`'s values.\n\nCrates using `Iter::next`, or `IterMut::next` are affected by this issue.",
                "fix": [
                    ">=1.1.4"
                ],
                "is_vulnerable_dependency_direct": false,
                "direct_dependency": {
                    "name": "slog-async",
                    "version": "2.7.0",
                    "owner": [],
                    "is_external": true
                },
                "dependency_chain": [
                    "slog-async:2.7.0"
                ],
                "risk_rating": "RiskRating.MEDIUM"
            }
        ]
    },
    "whitelist_status": [
        "regex:1.5.4 is not fixed and not present in the Whitelist",
        "thread_local:1.0.1 is not fixed and not present in the Whitelist"
    ]
}