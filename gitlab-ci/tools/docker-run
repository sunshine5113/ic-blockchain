#!/usr/bin/env bash
# Starts the Docker container and mounts some local folders as volumes for caching purposes.
# The purpose of this script is to replicate the CI environment.
#
# Example usage:
# REPO_ROOT $ ./gitlab-ci/tools/docker-run

set -eEuo pipefail

if [ -n "${DEBUG:-}" ]; then
    set -x
fi

REPO_ROOT="$(
    cd "$(dirname "$0")"
    git rev-parse --show-toplevel
)"

if [ -z "${IMAGE:-}" ]; then
    "$REPO_ROOT"/gitlab-ci/docker/docker-build-local-image.sh
fi

source "$REPO_ROOT/gitlab-ci/docker/docker-run-include"

CONTAINER="background-${IMAGE##*:}"

# on CI, clean up the container at the end
if [ -n "${CI_JOB_ID:-}" ]; then
    trap "docker rm -f $CONTAINER" EXIT
fi

# if there's no running container, start one
if [ -z "$(docker ps -q --filter name="$CONTAINER")" ]; then
    # if there's a stopped container, delete it (otherwise name conflict)
    if [ -n "$(docker ps -aq --filter name="$CONTAINER")" ]; then
        docker rm "$CONTAINER"
    fi

    # keep the container running for 24h
    docker run --name "$CONTAINER" -d "${DOCKER_RUN_ARGS[@]}" "$IMAGE" sleep 86400
fi

wdir="/ic/$(git rev-parse --show-prefix)"

if [[ -z "${@}" ]]; then
    set -x
    docker exec -w "$wdir" -it "$CONTAINER" gosu "$USER" bash
else
    set -x

    # This script needs to quote the parameters passed into bash -c.
    # However it also needs to escape quote each parameter so they are
    # parsed correctly on the other end.
    PARAMS=""
    for PARAM in "$@"; do
        PARAMS="${PARAMS} \"${PARAM}\""
    done
    docker exec -w "$wdir" "$CONTAINER" gosu "$USER" bash -c "${PARAMS}"
fi
