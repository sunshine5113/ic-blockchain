#!/usr/bin/env bash

set -euo pipefail

not_supported_prompt() {
    echo "$1"
    read -t 7 -r -s -p $'Press ENTER to continue the build anyway...\n'
}

if [ "$(uname)" != "Linux" ]; then
    not_supported_prompt "This script is only supported on Linux!"
fi

if docker info 2>&1 | grep -i -E '(storage driver|backing filesystem)' | grep -qi btrfs; then
    not_supported_prompt "Build reproducibility is not supported on btrfs filesystem!"
fi

if ! grep -q 'Ubuntu' /etc/os-release; then
    not_supported_prompt "Build reproducibility is only supported on Ubuntu!"
fi

set -x

export CI_JOB_NAME="${CI_JOB_NAME:-docker-build-ic}"

REPO_ROOT=$(git rev-parse --show-toplevel)
TAG=$(openssl rand -hex 4)
DOCKER_IMG_VERSION=$(cat "$REPO_ROOT/gitlab-ci/docker/TAG")

echo "Pulling dfinity/ic-build:$DOCKER_IMG_VERSION docker image"
if ! docker pull dfinity/ic-build:"$DOCKER_IMG_VERSION"; then
    # dfinity/ic-build:<tag> is not yet in dockerhub
    # handle the case when Dockerfile is updated in a MR
    echo "Image 'dfinity/ic-build:$DOCKER_IMG_VERSION' not in DockerHub"
    echo "Building 'dfinity/ic-build:$DOCKER_IMG_VERSION' image (--no-cache)"
    export DOCKER_BUILD_ARGS='--no-cache'
    "$REPO_ROOT"/gitlab-ci/docker/docker-build-image.sh
    unset DOCKER_BUILD_ARGS
fi

if [ -e /.dockerenv ]; then
    ARTIFACTS_VOLUME="ic-artifacts${CI_JOB_ID:-}"
else
    ARTIFACTS_VOLUME="ic-artifacts${USER:-$(whoami)}"
    docker volume rm -f "$ARTIFACTS_VOLUME" 2>/dev/null || true
fi

git clean -ffdx

GIT_REV=$(git rev-parse HEAD)
docker image build --no-cache -t ic-build-bd:$TAG -f- . <<EOF
FROM dfinity/ic-build:$DOCKER_IMG_VERSION
COPY --chown=ubuntu:ubuntu . /ic
RUN sudo mkdir -p /ic/artifacts && sudo chown -R ubuntu:ubuntu /ic/artifacts
EOF

export IMAGE=ic-build-bd:$TAG
"$REPO_ROOT"/gitlab-ci/tools/docker-run /ic/gitlab-ci/tools/build-ic "${1:--a=b,c,i}"

if docker volume inspect "$ARTIFACTS_VOLUME" 2>/dev/null; then
    mkdir -p artifacts
    cd artifacts

    # docker doesn't seem to provide means of getting data from the volume directly
    # we need to run a container with that volume and copy the data from the container
    DID=$(docker run --rm -it -d -v "$ARTIFACTS_VOLUME":/artifacts $IMAGE sleep 300)
    docker cp $DID:/artifacts docker-build-ic
    docker rm -f $DID
    docker volume rm -f "$ARTIFACTS_VOLUME" 2>/dev/null
fi
