#!/usr/bin/env bash

set -exuo pipefail

# Remove ~/.nix-profile/bin from the PATH to use native cargo
PATH=$(
    p=$(echo "$PATH" | tr ":" "\n" | grep -v "/.nix-profile/" | tr "\n" ":")
    echo "${p%:}"
)
export PATH=/opt/cargo/bin:$PATH
ROOT_DIR=$(git rev-parse --show-toplevel)
CI_PROJECT_DIR=${CI_PROJECT_DIR:-$ROOT_DIR}

ARTIFACTS="$1"
rm -rf "${ARTIFACTS}"
mkdir -p "${ARTIFACTS}"
cd "$ROOT_DIR/rs" || exit 1

wasm_canister_build_list=(
    cycles-minting-canister
    genesis-token-canister
    governance-canister
    governance-mem-test-canister
    identity-canister
    inter_canister_error_handling
    json
    ledger-archive-node-canister
    ledger-canister
    mem-utils-test-canister
    memory-test-canister
    nan_canonicalized
    nns-ui-canister
    panics
    pmap_canister
    registry-canister
    root-canister
    stable
    statesync-test-canister
    test-notified
    time
    upgrade-test-canister
    wasm
    xnet-test-canister
)
declare -A wasm_canister_copy_list=(
    ["cow_safety.wasm"]="rs/tests/src"
    ["counter.wat"]="rs/workload_generator/src"
)

function optimize_wasm() {
    bin_name="$1"

    src_filename="$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/$bin_name.wasm"
    if [[ -r "$src_filename" ]]; then
        ic-cdk-optimizer -o "${ARTIFACTS}/$bin_name.wasm" "$src_filename"
    else
        echo "ERROR: target canister Wasm binary does not exist: ${src_filename}"
        exit 1
    fi
}

function build_with_features() {
    bin_name="$1"
    features="$2"
    target_bin_name="$3"

    cargo build --target wasm32-unknown-unknown --release --bin "$bin_name" --features "$features"
    mv "$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/$bin_name.wasm" \
        "$CARGO_TARGET_DIR/wasm32-unknown-unknown/release/$target_bin_name.wasm"
}

function wasm_canisters_cargo_args() {
    # returns a list of wasm_canisters prefixed with "--bin"
    for c in "${wasm_canister_build_list[@]}"; do
        echo -n " --bin $c"
    done
}

build_with_features ledger-canister notify-method ledger-canister_notify-method

# We need to build and optimize ledger archive node before we build the ledger
# because the ledger embeds the Wasm file of the archive.
cargo build --target wasm32-unknown-unknown --release --bin ledger-archive-node-canister
optimize_wasm ledger-archive-node-canister
export LEDGER_ARCHIVE_NODE_CANISTER_WASM_PATH=${ARTIFACTS}/ledger-archive-node-canister.wasm

# shellcheck disable=SC2046  # Intended splitting of $(wasm_canisters_cargo_args)
cargo build --target wasm32-unknown-unknown --release $(wasm_canisters_cargo_args)

# Lifeline canister needs special handling:
cd "$ROOT_DIR/rs/nns/handlers/lifeline" || exit 1
cargo build --target wasm32-unknown-unknown
ic-cdk-optimizer -o "${ARTIFACTS}/lifeline.wasm" gen/lifeline.wasm

echo "Building of Wasm canisters finished"

cd "$ROOT_DIR" || exit 1

optimize_wasm ledger-canister_notify-method

for wasm in "${wasm_canister_build_list[@]}"; do
    optimize_wasm "$wasm"
done

# Copy/optimize prebuilt canisters
for can in "${!wasm_canister_copy_list[@]}"; do
    src_filename="${wasm_canister_copy_list[$can]}/$can"
    if [[ $can == *.wasm ]]; then
        ic-cdk-optimizer -o "${ARTIFACTS}/$can" "$ROOT_DIR/$src_filename"
    elif [[ $can == *.wat ]]; then
        cp "$ROOT_DIR/$src_filename" "${ARTIFACTS}/$can"
    else
        echo "ERROR: unknown (not .wat or .wasm) canister type: ${src_filename}"
        exit 1
    fi
done

sha256sum "${ARTIFACTS}"/*

gzip -f --no-name "${ARTIFACTS}"/*
