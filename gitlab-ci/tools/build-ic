#!/usr/bin/env bash

set -euo pipefail

DISK_DIR=/ic/artifacts/icos
CANISTERS_DIR=/ic/artifacts/canisters
ROOT_DIR=$(git rev-parse --show-toplevel)
BUILD_BINARIES=true
BUILD_CANISTERS=true
BUILD_IMAGES=true
# TODO: remove the assumption that git exists. It should build even from an extracted tarball.
VERSION="${VERSION:-$(git rev-parse HEAD)}"

cd $ROOT_DIR
sudo setfacl -m u:$(id -u):rwx -R $ROOT_DIR

usage() {
    echo "by default, this script builds everything including the Binaries, Canisters and the IC OS Image."
    echo " "
    echo "options:"
    echo "-h, --help                    show brief help"
    echo "-dd, --disk-dir=\"dir\"       specify the disk build directory"
    echo "-cd, --canisters-dir=\"dir\"  specify the canisters build directory"
    echo "-a, --artifacts=\"b,c,i\"     chose which artifacts you want to build separated by a comma"
    echo "                              options: b or binaries, c or canisters, i or image"
    exit 0
}

# Process flags
while test $# -gt 0; do
    case "$1" in
        -h | --help) usage ;;
        -a* | --artifacts*)
            if [[ "$1" == *"="* ]]; then
                value=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                value="$1"
            fi

            BUILD_BINARIES=false
            BUILD_CANISTERS=false
            BUILD_IMAGES=false

            # Iterate through the given artificats and sets the states
            IFS=',' read -ra options <<<"$value"
            for option in "${options[@]}"; do
                case "$option" in
                    b | binaries) BUILD_BINARIES=true ;;
                    c | canisters) BUILD_CANISTERS=true ;;
                    i | image) BUILD_IMAGES=true ;;
                esac
            done

            shift
            ;;
        -dd* | --disk-dir*)
            if [[ "$1" == *"="* ]]; then
                DISK_DIR=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                DISK_DIR="$1"
            fi
            shift
            ;;
        -cd* | --canisters-dir*)
            if [[ "$1" == *"="* ]]; then
                CANISTERS_DIR=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                CANISTERS_DIR="$1"
            fi
            shift
            ;;
    esac
done

HEADER_BINARIES=$(
    cat <<"EOF"
______       _ _     _ _              ______ _                  _
| ___ \     (_) |   | (_)             | ___ (_)                (_)
| |_/ /_   _ _| | __| |_ _ __   __ _  | |_/ /_ _ __   __ _ _ __ _  ___  ___
| ___ \ | | | | |/ _` | | '_ \ / _` | | ___ \ | '_ \ / _` | '__| |/ _ \/ __|
| |_/ / |_| | | | (_| | | | | | (_| | | |_/ / | | | | (_| | |  | |  __/\__ \_ _ _
\____/ \__,_|_|_|\__,_|_|_| |_|\__, | \____/|_|_| |_|\__,_|_|  |_|\___||___(_|_|_)
                                __/ |
                               |___/
EOF
)

HEADER_CANISTERS=$(
    cat <<"EOF"
______       _ _     _ _               _____             _     _
| ___ \     (_) |   | (_)             /  __ \           (_)   | |
| |_/ /_   _ _| | __| |_ _ __   __ _  | /  \/ __ _ _ __  _ ___| |_ ___ _ __ ___
| ___ \ | | | | |/ _` | | '_ \ / _` | | |    / _` | '_ \| / __| __/ _ \ '__/ __|
| |_/ / |_| | | | (_| | | | | | (_| | | \__/\ (_| | | | | \__ \ ||  __/ |  \__ \_ _ _
\____/ \__,_|_|_|\__,_|_|_| |_|\__, |  \____/\__,_|_| |_|_|___/\__\___|_|  |___(_|_|_)
                                __/ |
                               |___/
EOF
)

HEADER_ICOS=$(
    cat <<"EOF"
______       _ _     _ _               _____ _____   _____ _____   _____
| ___ \     (_) |   | (_)             |_   _/  __ \ |  _  /  ___| |_   _|
| |_/ /_   _ _| | __| |_ _ __   __ _    | | | /  \/ | | | \ `--.    | | _ __ ___   __ _  __ _  ___
| ___ \ | | | | |/ _` | | '_ \ / _` |   | | | |     | | | |`--. \   | || '_ ` _ \ / _` |/ _` |/ _ \
| |_/ / |_| | | | (_| | | | | | (_| |  _| |_| \__/\ \ \_/ /\__/ /  _| || | | | | | (_| | (_| |  __/_ _ _
\____/ \__,_|_|_|\__,_|_|_| |_|\__, |  \___/ \____/  \___/\____/   \___/_| |_| |_|\__,_|\__, |\___(_|_|_)
                                __/ |                                                    __/ |
                               |___/                                                    |___/
EOF
)

HEADER_BUILD=$(
    cat <<"EOF"
______       _ _     _    ___       _   _  __           _
| ___ \     (_) |   | |  / _ \     | | (_)/ _|         | |      _
| |_/ /_   _ _| | __| | / /_\ \_ __| |_ _| |_ __ _  ___| |_ ___(_)
| ___ \ | | | | |/ _` | |  _  | '__| __| |  _/ _` |/ __| __/ __|
| |_/ / |_| | | | (_| | | | | | |  | |_| | || (_| | (__| |_\__ \_
\____/ \__,_|_|_|\__,_| \_| |_/_|   \__|_|_| \__,_|\___|\__|___(_)
EOF
)

export CI_JOB_ID=${CI_JOB_ID:-""}
export CI_JOB_NAME=${CI_JOB_NAME:-""}
export ROOT_PIPELINE_ID=${ROOT_PIPELINE_ID:-""}
export CI_PROJECT_DIR=${CI_PROJECT_DIR:-$ROOT_DIR}
export BUILD_EXTRA_SUFFIX=${BUILD_EXTRA_SUFFIX:-""}
export BUILD_EXTRA_ARGS=${BUILD_EXTRA_ARGS:-""}

if [ "$BUILD_BINARIES" == "true" ]; then
    echo -e "\n${HEADER_BINARIES}\n"
    gitlab-ci/src/job_scripts/lib/cargo-build-release-linux-native.sh
fi
if [ "$BUILD_CANISTERS" == "true" ]; then
    echo -e "\n${HEADER_CANISTERS}\n"
    gitlab-ci/tools/job-driver.py cargo-build-canisters "${CANISTERS_DIR}"
fi
if [ "$BUILD_IMAGES" == "true" ]; then
    if [ "$BUILD_BINARIES" != "true" ]; then
        echo "Trying to pull binaries from S3"
        mkdir -p /ic/artifacts/release
        gitlab-ci/src/artifacts/rclone_download.py --remote-path=release --unpack --mark-executable \
            --git-rev "${VERSION}" --out /ic/artifacts/release
    fi
    echo -e "\n${HEADER_ICOS}\n"
    gitlab-ci/src/job_scripts/lib/guest-os-updateimg.sh "${DISK_DIR}"
fi

echo
echo -e "\n${HEADER_BUILD}\n"
if [ "$BUILD_BINARIES" == "true" ]; then
    echo Release Binaries
    cd /ic/artifacts/release
    ls -1 *.gz | xargs -n1 sha256sum | tee /tmp/binaries.txt
    echo
fi

if [ "$BUILD_CANISTERS" == "true" ]; then
    echo Canister Binaries
    cd /ic/artifacts/canisters
    ls -1 *.gz | xargs -n1 sha256sum | tee /tmp/canisters.txt
    echo
fi

if [ "$BUILD_IMAGES" == "true" ] && [ "$BUILD_BINARIES" == "true" ] && [ "$BUILD_CANISTERS" == "true" ]; then
    echo IC-OS Image
    cd "$DISK_DIR"
    ls -1 update-img.tar.gz | xargs -n1 sha256sum | tee /tmp/update-img.txt
    echo
fi

cd /tmp
echo SHA256SUMS
if [ "$BUILD_BINARIES" == "true" ]; then
    sha256sum binaries.txt
fi
if [ "$BUILD_CANISTERS" == "true" ]; then
    sha256sum canisters.txt
fi
if [ "$BUILD_IMAGES" == "true" ] && [ "$BUILD_BINARIES" == "true" ] && [ "$BUILD_CANISTERS" == "true" ]; then
    sha256sum update-img.txt
fi
echo
