legacy-system-tests:
  extends: .cargo-build-docker
  # System tests are very flaky due to replica non-determinism.
  retry: 2
  stage: cargo-test
  needs:
    - cargo-build-canisters
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-malicious
  artifacts:
    paths:
      - replica-logs/
      - junit_data/
      - coredumps/
      - test-results.json
    when: always
    expire_in: 1 week
    reports:
      junit: test_report.xml
  variables:
      BLOCKING: "blocking"
      TEST_RUNNER_ARGS: "--experimental --jobs 6 --timeout 720s --ready-timeout 90s --result-file ${CI_PROJECT_DIR}/test-results.json --tee-replica-logs-base-dir ${CI_PROJECT_DIR}/replica-logs --skip staging -v"
      RUST_BACKTRACE: 1
  script:
    - |
      # Capsule for system tests is configured in Capsule.toml
      capsule -v -- "${CI_PROJECT_DIR}/gitlab-ci/src/job_scripts/system-tests.sh"

check-bins-linux:
  extends:
    - .rules-parent-pipeline
  stage: cargo-test
  needs:
    - dfx-build-release-linux
  image:
    # 21.04
    name: ubuntu@sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf
  before_script: /bin/true
  after_script: /bin/true
  variables:
    ARTIFACT_PREFIX: artifacts/sdk-release/x86_64-linux
  script:
    - |
      set -exuo pipefail

      gunzip < "$ARTIFACT_PREFIX/replica.gz" > /tmp/replica
      chmod +x /tmp/replica
      ldd /tmp/replica
      /tmp/replica --print-sample-config --replica-version 1 >/dev/null

      gunzip < "$ARTIFACT_PREFIX/ic-starter.gz" > /tmp/ic-starter
      chmod +x /tmp/ic-starter
      ldd /tmp/ic-starter
      /tmp/ic-starter --version

check-bins-darwin:
  extends:
    - .rules-parent-pipeline-protected-branch-only
  stage: cargo-test
  needs:
    - dfx-build-release-darwin
  tags:
    - dfinity
    - macos
  before_script: /usr/bin/true
  after_script: /usr/bin/true
  variables:
    ARTIFACT_PREFIX: artifacts/sdk-release/x86_64-darwin
  script:
    - |
      set -exuo pipefail

      gunzip < "$ARTIFACT_PREFIX/replica.gz" > /tmp/replica
      chmod +x /tmp/replica
      otool -L /tmp/replica
      /tmp/replica --print-sample-config --replica-version 1 >/dev/null

      gunzip < "$ARTIFACT_PREFIX/ic-starter.gz" > /tmp/ic-starter
      chmod +x /tmp/ic-starter
      otool -L /tmp/ic-starter
      /tmp/ic-starter --version

ic-ref-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-parent-pipeline
  stage: cargo-test
  retry: 2
  needs:
    - cargo-build-release-linux-native
  artifacts:
    when: always
    paths:
      - rs/report.html
      - rs/replica.stdout
      - rs/replica.stderr
    reports:
      junit: rs/ic-ref-test.xml
  variables:
      BLOCKING: "non-blocking"
      TEST_RUNNER_ARGS: "--skip staging_"
      USE_APP_SUBNET: "false"
      ALLOW_FAILURE: "true"
  parallel:
    matrix:
      - IC_REF_VERSION: "0_16"
      - IC_REF_VERSION: "0_17"
      - IC_REF_VERSION: "0_18"
  script:
    - |
      set -exuo pipefail

      # Fetch latest master build for upgrade tests.
      # Note that upgrade tests do *not* support malicious behavior as of now.
      mkdir ic-binary-base
      pushd ic-binary-base

      # Download the latest master artifacts before or including the branch's merge base.
      # Master is rebuilt every 2 hours, so in the worst case we may skip a few commits.
      # Most often this will be exactly the branch's merge base.
      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py \
       --latest-to --merge-base=post-merge-tests-passed --remote-path=release --out=artifacts/release

      ls -lah
      cd artifacts/release
      BASE_BIN_DIR=$(pwd)
      ls -lah
      for f in replica orchestrator canister_sandbox; do
        gunzip "$f.gz"
        chmod +x "$f"
      if [ -f sandbox_launcher.gz ]; then
        gunzip sandbox_launcher.gz
        chmod +x sandbox_launcher
      fi
      done
      popd

      cd "${CI_PROJECT_DIR}/artifacts/release"

      ls -lah

      TMP_DIR=$(mktemp -d)
      for f in replica orchestrator ic-test-bin canister_sandbox sandbox_launcher; do
        gunzip -k "$f.gz"
        chmod +x "$f"
        mv "$f" "${TMP_DIR}"
      done

      for f in replica orchestrator; do
        mv "${BASE_BIN_DIR}/$f" "${TMP_DIR}/${f}_base"
      done

      cd "${CI_PROJECT_DIR}"

      ls -lah "${TMP_DIR}"


      export PATH="${TMP_DIR}:$PATH"
      export LANG=C.UTF-8

      # IDX generally limits the nix-shell to only provide tool-chain dependencies. However, the ic-ref tests are
      # grandfathered into GitLab CI. Please speak with IDX team [#eng-idx] for guidance on how to plumb
      #  binary or code artifacts
      $SHELL_WRAPPER nix-shell -p "(import ./nix {}).ic-ref-$IC_REF_VERSION" --run ./tests/ic-ref-test/run

ic-ref-test-use-app-subnet:
  extends:
    - ic-ref-test
  variables:
    USE_APP_SUBNET: "true"
    ALLOW_FAILURE: "true"
  allow_failure: true

ic-p8s-sd-e2e-test:
  extends: .cargo-build-docker
  needs:
    - cargo-build-release-linux-native
  stage: cargo-test
  script:
    - |
      $SHELL_WRAPPER python3 "${CI_PROJECT_DIR}"/rs/ic_p8s_service_discovery/tests/e2e-test.py
