system-tests:
  extends: .cargo-build-docker
  # System tests are very flaky due to replica non-determinism.
  retry: 2
  stage: cargo-test
  needs:
    - cargo-build-canisters
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-malicious
  artifacts:
    paths:
      - replica-logs/
      - junit_data/
      - coredumps/
      - runtime-stats.json
    when: always
    expire_in: 1 week
    reports:
      junit: test_report.xml
  variables:
      BLOCKING: "blocking"
      TEST_RUNNER_ARGS: "--experimental --jobs 6 --timeout 720s --ready-timeout 90s --runtime-stats ${CI_PROJECT_DIR}/runtime-stats.json --tee-replica-logs-base-dir ${CI_PROJECT_DIR}/replica-logs --skip staging -v"
      RUST_BACKTRACE: 1
      BUILD_COMMAND_POST: "/usr/bin/time ${CI_PROJECT_DIR}/gitlab-ci/src/artifacts/collect_core_dumps.sh"
  script:
    - |
      set -exuo pipefail
      eval "$BUILD_COMMAND_PRE"

      cd "${CI_PROJECT_DIR}/rs"
      # Setup PATH
      mkdir local-bin
      for f in "${CI_PROJECT_DIR}"/artifacts/release/*.gz; do
        target=$(basename "$f" .gz)
        gunzip -c -d "$f" > "local-bin/$target"
        chmod +x "local-bin/$target"
      done

      for f in "${CI_PROJECT_DIR}"/artifacts/release-malicious/*.gz; do
        target=$(basename "$f" .gz)
        gunzip -c -d "$f" > "local-bin/$target"
        chmod +x "local-bin/$target"
      done

      gunzip -c -d "${CI_PROJECT_DIR}/artifacts/release/nodemanager.gz" > "local-bin/nodemanager"
      chmod +x "local-bin/nodemanager"
      export PATH=$PWD/local-bin:$PATH

      # shellcheck source=/dev/null
      source "$CI_PROJECT_DIR/gitlab-ci/src/canisters/wasm-build-functions.sh"
      export_wasm_canister_paths "${CI_PROJECT_DIR}/artifacts/canisters"

      # Run system tests, writing its JSON output to disk to be uploaded to CI.
      # Only tests that are being selected by test runner options are run.
      # Note: due to the bash settings to fail on any error, we have to be very careful how we
      # get the command exit status. If we don't collect the exit status properly, GitLab status
      # will not be updated at the end of this script
      "$SHELL_WRAPPER" nix-shell --run "
        set -exuo pipefail
        system-tests $TEST_RUNNER_ARGS | tee ci_output.json
      " && RES=0 || RES=$?
      echo "System tests finished with exit code $RES"

      # Export runtime statistics of system tests to Honeycomb.
      python3 "${CI_PROJECT_DIR}"/gitlab-ci/src/test_spans/exporter.py \
      --runtime_stats "${CI_PROJECT_DIR}"/runtime-stats.json \
      --trace_id "$ROOT_PIPELINE_ID" \
      --parent_id "$CI_JOB_ID" \
      --type "system-tests"

      if eval "$BUILD_COMMAND_POST" && [[ $RES == 0 ]]; then
        # Check LTL predicates for replica logs collected during execution of the system tests.
        echo "Running the LTL analyzer..."
        REPLICA_LOGS_BASE_DIR=$(find "${CI_PROJECT_DIR}"/replica-logs/* -type d | head -1)
        cd "${CI_PROJECT_DIR}/hs/analyzer"
        buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" transducer -- \
        "$SHELL_WRAPPER" nix-shell --run "
          set -exuo pipefail
          cabal run analyze $REPLICA_LOGS_BASE_DIR
        "
        RES=$?
      else
        RES=1
      fi

      if [[ $RES -ne 0 ]]; then
        echo "FAILURE. READ ME:"
        echo "================="
        echo ""
        echo "(0) Currently, logs are analyzed only on CI. So you might encounter"
        echo "    failures on CI that cannot be reproduced locally (e.g. when"
        echo "    running setup-and-cargo-test.sh)."
        echo ""
        echo "(1) The logs produced by all nodes are stored with the CI Job artifacts."
        echo "    In case of any failure, please take a look at them before reporting "
        echo "    a problem."
        echo ""
        echo "(2) If any of the pots that are marked as 'experimental' failed (e.g."
        echo "    exp_basic_health_pot), NOTIFY the testing team and disable the test"
        echo "    on your PR with a corresponding comment."
        echo ""
        echo "    (Unfortunately, as of now, the tests are not run if some of the"
        echo "    of the dependencies, such as ic-os scripts, change. Thus, failures"
        echo "    might be reduced silently.)"
        echo ""
      fi

      exit $RES

ic-ref-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-parent-pipeline
  stage: cargo-test
  retry: 2
  needs:
    - cargo-build-release-linux-native
  artifacts:
    when: always
    paths:
      - rs/report.html
      - rs/replica.stdout
      - rs/replica.stderr
    reports:
      junit: rs/ic-ref-test.xml
  variables:
      BLOCKING: "non-blocking"
      TEST_RUNNER_ARGS: "--skip staging_"
      USE_APP_SUBNET: "false"
      ALLOW_FAILURE: "true"
  parallel:
    matrix:
      - IC_REF_VERSION: "0_16"
      - IC_REF_VERSION: "0_17"
      - IC_REF_VERSION: "0_18"
  script:
    - |
      set -exuo pipefail

      # Fetch latest master build for upgrade tests.
      # Note that upgrade tests do *not* support malicious behavior as of now.
      mkdir ic-binary-base
      pushd ic-binary-base

      # Download the latest master artifacts before or including the branch's merge base.
      # Master is rebuilt every 2 hours, so in the worst case we may skip a few commits.
      # Most often this will be exactly the branch's merge base.
      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py \
       --latest-to --merge-base=post-merge-tests-passed --remote-path=release --out=artifacts/release

      ls -lah
      cd artifacts/release
      BASE_BIN_DIR=$(pwd)
      ls -lah
      gunzip nodemanager.gz
      gunzip replica.gz
      chmod +x nodemanager
      chmod +x replica
      popd

      cd "${CI_PROJECT_DIR}/artifacts/release"

      ls -lah

      mkdir -p "${CI_PROJECT_DIR}/rs/local-bin"
      for f in replica nodemanager ic-test-bin; do
        gunzip -k "$f.gz"
        chmod +x "$f"
        mv "$f" "${CI_PROJECT_DIR}/rs/local-bin/$f"
      done

      for f in replica nodemanager; do
        mv "${BASE_BIN_DIR}/$f" "${CI_PROJECT_DIR}/rs/local-bin/${f}_base"
      done

      cd "${CI_PROJECT_DIR}"

      ls -lah rs/local-bin


      export PATH="${CI_PROJECT_DIR}/rs/local-bin:$PATH"
      export LANG=C.UTF-8

      # IDX generally limits the nix-shell to only provide tool-chain dependencies. However, the ic-ref tests are 
      # grandfathered into GitLab CI. Please speak with IDX team [#eng-idx] for guidance on how to plumb
      #  binary or code artifacts
      $SHELL_WRAPPER nix-shell -p "(import ./nix {}).ic-ref-$IC_REF_VERSION" --run ./tests/ic-ref-test/run

ic-ref-test-use-app-subnet:
  extends:
    - ic-ref-test
  variables:
    USE_APP_SUBNET: "true"
    ALLOW_FAILURE: "true"
  allow_failure: true
