.e2e-test-base:
  extends:
    # Use untrusted builders for e2e tests.
    # The trusted builders don't work with IPv6 right now.
    - .ubuntu-nix-docker
    - .rules-parent-pipeline
  stage: guest-os-test
  retry: 2
  # The e2e tests are flaky and impacting developer merges
  # https://dfinity.slack.com/archives/C012RDFNK7U/p1618233620112900
  variables:
    E2E_TEST_TIMEOUT: 240

e2e-workload-test:
  extends:
    - .e2e-test-base
  needs:
    - guest-os-diskimg
    - cargo-build-release-linux-native
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e
  script:
    - |
      # Make sure the host has mounted necessary devices into the docker container.
      # And check dependencies.
      ls -lah /dev/kvm /dev/net/tun "${CI_PROJECT_DIR}/artifacts/release" "${CI_PROJECT_DIR}/ic-os/guestos/build-out"

      mkdir -p gitlab-runner-tmp; cd gitlab-runner-tmp

      tar --sparse -xvf  "${CI_PROJECT_DIR}/ic-os/guestos/build-out/disk-img/disk-img.tar.gz"

      for f in ic-prep ic-workload-generator; do
        gzip -d "${CI_PROJECT_DIR}/artifacts/release/$f.gz"
        chmod u+x "${CI_PROJECT_DIR}/artifacts/release/$f"
        ln -sf "${CI_PROJECT_DIR}/artifacts/release/$f" "$f"
      done

      ls -lah

      # Prepare network. There are more convenient ways to do it if requisite
      # services are set up (which they aren't in a simple docker runner),
      # but probably also helpful for debugging to have this "explicit" for now.

      sudo ip link del ipv6_ic_node0 || true
      sudo ip link del ipv6_ic_node1 || true
      sudo ip link del ipv6_ic || true

      sudo ip tuntap add ipv6_ic_node0 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node0 up

      sudo ip tuntap add ipv6_ic_node1 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node1 up

      sudo ip link add name ipv6_ic type bridge
      sudo ip link set ipv6_ic_node0 master ipv6_ic
      sudo ip link set ipv6_ic_node1 master ipv6_ic
      sudo ip link set dev ipv6_ic up

      sudo ip addr add fd00:2:1:1:1::1/64 dev ipv6_ic

      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e"
      # Actual test script, sets up VMs and drives the test.
      capsule -v -i "../ic-os/guestos/tests/*.py" -i "**/*" -- \
      "${CI_PROJECT_DIR}/ic-os/guestos/tests/e2e-workload.py" \
          --vmtoolscfg=internal \
          --disk_image "$(pwd)/disk.img" \
          --ic_prep_bin "$(pwd)/ic-prep" \
          --ic_workload_generator_bin "$(pwd)/ic-workload-generator" \
          --log_directory "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e" \
          --timeout "$E2E_TEST_TIMEOUT"

e2e-scalability-suite-test:
  extends:
    - .e2e-test-base
  needs:
    - guest-os-diskimg
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-scalability-suite-test
    - scalability/
  script:
    - |
      # Make sure the host has mounted necessary devices into the docker container.
      # And check dependencies.
      ls -lah /dev/kvm /dev/net/tun "${CI_PROJECT_DIR}/artifacts/release" "${CI_PROJECT_DIR}/ic-os/guestos/build-out"

      mkdir -p gitlab-runner-tmp; cd gitlab-runner-tmp

      tar --sparse -xvf  "${CI_PROJECT_DIR}/ic-os/guestos/build-out/disk-img/disk-img.tar.gz"

      ls "${CI_PROJECT_DIR}/artifacts/canisters"
      for canister in "${CI_PROJECT_DIR}"/artifacts/canisters/*.gz; do
        gzip -d "${canister}"
      done
      ls "${CI_PROJECT_DIR}/artifacts/canisters"

      for f in ic-admin ic-nns-init ic-prep ic-workload-generator; do
        gzip -d "${CI_PROJECT_DIR}/artifacts/release/$f.gz"
        chmod u+x "${CI_PROJECT_DIR}/artifacts/release/$f"
        ln -sf "${CI_PROJECT_DIR}/artifacts/release/$f" "$f"
      done

      ls -lah

      # Prepare network. There are more convenient ways to do it if requisite
      # services are set up (which they aren't in a simple docker runner),
      # but probably also helpful for debugging to have this "explicit" for now.

      sudo ip link del ipv6_ic_node0 || true
      sudo ip link del ipv6_ic_node1 || true
      sudo ip link del ipv6_ic || true

      sudo ip tuntap add ipv6_ic_node0 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node0 up

      sudo ip tuntap add ipv6_ic_node1 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node1 up

      sudo ip link add name ipv6_ic type bridge
      sudo ip link set ipv6_ic_node0 master ipv6_ic
      sudo ip link set ipv6_ic_node1 master ipv6_ic
      sudo ip link set dev ipv6_ic up

      sudo ip addr add fd00:2:1:1:1::1/64 dev ipv6_ic

      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e"
      # Actual test script, sets up VMs and drives the test.

      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e-scalability-suite-test"

      GUESTOS_IMG="$(pwd)/disk.img"
      cd "${CI_PROJECT_DIR}/scalability"
      # Actual test script, sets up VMs and drives the test.
      pip3 install --user -r requirements.txt
      capsule -v -i "../ic-os/guestos/tests/*.py" -i "../gitlab-runner-tmp/**/*" -- \
      "${CI_PROJECT_DIR}/ic-os/guestos/tests/e2e-benchmarking-suite.py" \
          --vmtoolscfg=internal \
          --timeout "$E2E_TEST_TIMEOUT" \
          --disk_image "$GUESTOS_IMG" \
          --ic_admin_bin "${CI_PROJECT_DIR}/artifacts/release/ic-admin" \
          --nns_canisters "${CI_PROJECT_DIR}/artifacts/canisters/" \
          --ic_prep_bin "${CI_PROJECT_DIR}/artifacts/release/ic-prep" \
          --install_nns_bin "${CI_PROJECT_DIR}/artifacts/release/ic-nns-init" \
          --artifacts_path "${CI_PROJECT_DIR}/artifacts/release/" \
          --log_directory "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e-scalability-suite-test"


guest-os-upgrade-from-mainnet-app-subnet-to-new-version:
  extends:
    - .e2e-test-base
  timeout: 20m
  needs:
    - guest-os-diskimg
    - guest-os-updateimg-build
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-upgrade-from-mainnet-app-subnet-to-new-version
  script:
    - |
      $SHELL_WRAPPER "$CI_PROJECT_DIR"/ic-os/guestos/tests/e2e-upgrade-with-mainnet-version.sh "$CI_PROJECT_DIR" "app" "false"


guest-os-downgrade-from-new-version-to-mainnet-app-subnet:
  extends:
    - .e2e-test-base
  timeout: 20m
  needs:
    - guest-os-diskimg
    - guest-os-updateimg-build
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-downgrade-from-new-version-to-mainnet-app-subnet
  script:
    - |
      $SHELL_WRAPPER "$CI_PROJECT_DIR"/ic-os/guestos/tests/e2e-upgrade-with-mainnet-version.sh "$CI_PROJECT_DIR" "app" "true"

guest-os-upgrade-from-mainnet-nns-subnet-to-new-version:
  extends:
    - .e2e-test-base
  timeout: 20m
  needs:
    - guest-os-diskimg
    - guest-os-updateimg-build
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-upgrade-from-mainnet-nns-subnet-to-new-version
  script:
    - |
      $SHELL_WRAPPER "$CI_PROJECT_DIR"/ic-os/guestos/tests/e2e-upgrade-with-mainnet-version.sh "$CI_PROJECT_DIR" "nns" "false"


guest-os-downgrade-from-new-version-to-mainnet-nns-subnet:
  extends:
    - .e2e-test-base
  timeout: 20m
  needs:
    - guest-os-diskimg
    - guest-os-updateimg-build
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-downgrade-from-new-version-to-mainnet-nns-subnet
  script:
    - |
      $SHELL_WRAPPER "$CI_PROJECT_DIR"/ic-os/guestos/tests/e2e-upgrade-with-mainnet-version.sh "$CI_PROJECT_DIR" "nns" "true"

.run-farm-based-test: &run-farm-based-test |
  # Determine a fake GIT_REVISION. It will be the SHA of the inputs to the image.
  # TODO: remove the assumption in tests that there is git.
  GIT_REVISION=$("${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/find-build-id.sh)
  export GIT_REVISION
  BASE_DIR="${CI_PROJECT_DIR}/logs/$(date +%Y%m%d_%H%M%S)"
  mkdir -p "$BASE_DIR"
  # Logs produced during execution of the system tests are stored away in a structured way, i.e. one file per test.
  # Unstructured logs, i.e. those which bypassed the logger and were outputed directly to stdout/stderr,
  # are forwarded to a separate file.
  # All lines produced by the logger share the same structure: e.g. "Nov 10 13:20:30.931 INFO ...".
  # Hence, the fourth column can be used to distinguish structured from unstructerd logs.
  $SHELL_WRAPPER capsule -v -t "${GIT_REVISION}" -i 'ic-os/guestos/build-out/**/*' -- \
  "${CI_PROJECT_DIR}/rs/tests/run-farm-based-system-tests.sh" \
    --suite "${SUITE_NAME}" \
    --log-base-dir "${BASE_DIR}" \
  | tee "${BASE_DIR}/unstructured-logs.log" \
  | awk '$4 ~ /CRIT|ERRO|WARN|INFO|DEBG|TRCE/'

.system-tests:
  extends:
    - .e2e-test-base
  needs:
    - guest-os-diskimg
    - guest-os-diskimg-dev
    - guest-os-diskimg-dev-malicious
    - cargo-build-release-linux-native
    - cargo-build-release-linux-native-nd
    - cargo-build-canisters
    - artifacts-upload-to-s3
  artifacts:
    when: always
    paths:
      - "test-results.json"
      - "logs/"
  timeout: 30m
  script:
    - *run-farm-based-test

system-tests-pre-master:
  extends: .system-tests
  variables:
    SUITE_NAME: "pre_master"

rosetta-hourly:
  extends: .system-tests
  variables:
    SUITE_NAME: "rosetta"
  script:
    - |
      # Ensure that rosetta 3rd-party dependencies are available
      # shellcheck disable=SC1090
      . "${CI_PROJECT_DIR}/rs/tests/prepare-rosetta-deps.sh"
    - *run-farm-based-test
