.e2e-test-base:
  extends:
    # Use untrusted builders for e2e tests.
    # The trusted builders don't work with IPv6 right now.
    - .ubuntu-nix-docker-pinned-dc
    - .rules-parent-pipeline
  stage: guest-os-test
  retry: 2
  # The e2e tests are flaky and impacting developer merges
  # https://dfinity.slack.com/archives/C012RDFNK7U/p1618233620112900
  variables:
    GUEST_OS_TEST_TIMEOUT: 2400
    # This var is needed as some shell scripts depend on it.
    E2E_TEST_TIMEOUT: 480

e2e-workload-test:
  extends:
    - .e2e-test-base
  needs:
    - job: artifacts-upload-to-s3
    - job: guest-os-diskimg
      artifacts: false
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e
  script:
    - |
      VERSION=$(cat VERSION)
      export VERSION
      # release
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="release" \
          --out="artifacts/release"
      # disk-img
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="guest-os/disk-img" \
          --out="ic-os/guestos/build-out/disk-img"

      # Make sure the host has mounted necessary devices into the docker container.
      # And check dependencies.
      ls -lah /dev/kvm /dev/net/tun "${CI_PROJECT_DIR}/artifacts/release" "${CI_PROJECT_DIR}/ic-os/guestos/build-out"

      mkdir -p gitlab-runner-tmp; cd gitlab-runner-tmp

      tar --sparse -xvf  "${CI_PROJECT_DIR}/ic-os/guestos/build-out/disk-img/disk-img.tar.gz"

      for f in ic-prep ic-workload-generator; do
        pigz -d "${CI_PROJECT_DIR}/artifacts/release/$f.gz"
        chmod u+x "${CI_PROJECT_DIR}/artifacts/release/$f"
        ln -sf "${CI_PROJECT_DIR}/artifacts/release/$f" "$f"
      done

      ls -lah

      # Prepare network. There are more convenient ways to do it if requisite
      # services are set up (which they aren't in a simple docker runner),
      # but probably also helpful for debugging to have this "explicit" for now.

      sudo ip link del ipv6_ic_node0 || true
      sudo ip link del ipv6_ic_node1 || true
      sudo ip link del ipv6_ic || true

      sudo ip tuntap add ipv6_ic_node0 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node0 up

      sudo ip tuntap add ipv6_ic_node1 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node1 up

      sudo ip link add name ipv6_ic type bridge
      sudo ip link set ipv6_ic_node0 master ipv6_ic
      sudo ip link set ipv6_ic_node1 master ipv6_ic
      sudo ip link set dev ipv6_ic up

      sudo ip addr add fd00:2:1:1:1::1/64 dev ipv6_ic

      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e"
      # Actual test script, sets up VMs and drives the test.
      capsule -v -i "../ic-os/guestos/tests/*.py" -i "**/*" -- \
      "${CI_PROJECT_DIR}/ic-os/guestos/tests/e2e-workload.py" \
          --vmtoolscfg=internal \
          --disk_image "$(pwd)/disk.img" \
          --ic_prep_bin "$(pwd)/ic-prep" \
          --ic_workload_generator_bin "$(pwd)/ic-workload-generator" \
          --log_directory "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e" \
          --timeout "$GUEST_OS_TEST_TIMEOUT"

.run-farm-based-test: &run-farm-based-test |
  # we get VERSION from artifacts-upload-to-s3
  IC_VERSION_ID=$(cat VERSION)
  export IC_VERSION_ID
  #XXX(marko): we need to change this
  # binaries are needed for run-system-tests.py
  "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
      --git-rev="${IC_VERSION_ID}" --remote-path="release" \
      --out="artifacts/release"
  # canisters are needed for run-system-tests.py
  "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
      --git-rev="${IC_VERSION_ID}" --remote-path="canisters" \
      --out="artifacts/canisters"
  # capsule needs disk image as an input for caching
  "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
      --git-rev="${IC_VERSION_ID}" --remote-path="guest-os/disk-img" \
      --out="ic-os/guestos/build-out/disk-img"
  BASE_DIR="${CI_PROJECT_DIR}/working_dir/$(date +%Y%m%d_%H%M%S)"
  mkdir -p "$BASE_DIR"
  # Logs produced during execution of the system tests are stored away in a structured way, i.e. one file per test.
  # Unstructured logs, i.e. those which bypassed the logger and were outputed directly to stdout/stderr,
  # are forwarded to a separate file.
  # All lines produced by the logger share the same structure: e.g. "Nov 10 13:20:30.931 INFO ...".
  # Hence, the fourth column can be used to distinguish structured from unstructerd logs.
  $SHELL_WRAPPER capsule -v -t "${IC_VERSION_ID}" -t "${SUITE_NAME}" -i 'ic-os/guestos/build-out/**/*.gz' -- \
  "${CI_PROJECT_DIR}/rs/tests/run-system-tests.py" \
    --suite="${SUITE_NAME}" \
    --working-dir="${BASE_DIR}" \
  | tee "${BASE_DIR}/unstructured-logs.log" \
  | awk '$4 ~ /CRIT|ERRO|WARN|INFO|DEBG|TRCE/'

.system-tests:
  extends:
    - .e2e-test-base
  needs:
    - job: guest-os-diskimg
      artifacts: false
    - job: guest-os-diskimg-dev
      artifacts: false
    - job: guest-os-diskimg-dev-malicious
      artifacts: false
    - job: boundary-os-diskimg
      artifacts: false
    - job: boundary-os-diskimg-dev
      artifacts: false
    - artifacts-upload-to-s3
  artifacts:
    when: always
    paths:
      - "test-results.json"
      - "working_dir/"
  script:
    - *run-farm-based-test

system-tests-pre-master:
  extends: .system-tests
  variables:
    SUITE_NAME: "pre_master"

rosetta-pre-master:
  extends: .system-tests
  variables:
    SUITE_NAME: "rosetta"
  script:
    - |
      # Ensure that rosetta 3rd-party dependencies are available
      # shellcheck disable=SC1090
      . "${CI_PROJECT_DIR}/rs/tests/prepare-rosetta-deps.sh"
    - *run-farm-based-test

subnet-recovery-pre-master:
  extends: .system-tests
  variables:
    SUITE_NAME: "subnet_recovery"
  script:
    - |
      # Set the hash-commit of the broken blockmaker branch
      BROKEN_BLOCKMAKER_GIT_REVISION=$("${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh origin/broken-blockmaker)
      export BROKEN_BLOCKMAKER_GIT_REVISION
    - *run-farm-based-test

upgrade-compatibility-pre-master:
  extends: .system-tests
  needs:
    - job: artifacts-upload-to-s3
    - job: guest-os-diskimg
      artifacts: false
    - job: guest-os-updateimg-build
      artifacts: false
  artifacts:
    paths:
    - "test-results.json"
    - "working_dir/"
  variables:
    SUITE_NAME: "upgrade_compatibility"
  script:
    - |
      VERSION=$(cat VERSION)
      export VERSION
      # release
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="release" \
          --out="artifacts/release"

      mkdir -p test-tools-tmp
      IC_ADMIN="test-tools-tmp/ic-admin"
      gunzip -c "artifacts/release/ic-admin.gz" > "${IC_ADMIN}"
      chmod +x "${IC_ADMIN}"

      # sets the variable $TARGET_VERSION
      # shellcheck source=/dev/null
      source ic-os/guestos/tests/mainnet-revision.sh
    - *run-farm-based-test

spec-compliance-pre-master:
  extends: .system-tests
  script:
    - |
      IC_VERSION_ID=$(cat VERSION)
      export IC_VERSION_ID
      # binaries are needed for run-system-tests.py
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${IC_VERSION_ID}" --remote-path="release" \
          --out="artifacts/release"
      # canisters are needed for run-system-tests.py
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${IC_VERSION_ID}" --remote-path="canisters" \
          --out="artifacts/canisters"
      "$SHELL_WRAPPER" nix-shell -p "(import ./nix {}).ic-ref" --run "
        ${CI_PROJECT_DIR}/rs/tests/run-system-tests.py --suite=spec_compliance
      "
