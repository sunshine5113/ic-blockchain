docker-autobuild-protected:
  extends: 
    - .ubuntu-nix-docker
    - .rules-protected-branch
  image:
    name: "dfinity/ic-build-nix:latest"
  needs: []
  stage: test
  tags:
    - dfinity-launch
  script:
    - |
      set -euo pipefail

      nix-collect-garbage -d

      # image used in this revision
      cd gitlab-ci/config
      CI_IMAGE=$(grep registry.gitlab.com 00--common.yml | awk '{ print $2 }' | tr -d '"')
      CI_IMAGE_NAME=$(echo "$CI_IMAGE" | cut -d':' -f1)
      CI_IMAGE_TAG=$(echo "$CI_IMAGE" | cut -d':' -f2)
      cd -
      # docker image tag
      TAG=$(cat ./gitlab-ci/docker/TAG)

      # check if we have it in dockerhub
      EXISTS=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")

      if (docker images | grep "$CI_IMAGE_NAME" | grep -q "$CI_IMAGE_TAG"); then
        # we have docker image present
        echo "Image '$CI_IMAGE_NAME:$CI_IMAGE_TAG' already present!"
      else
        # no image on this protected runner
        # build it and push it to dockerhub
        echo -e "\e[0Ksection_start:$(date +%s):docker_build_script[collapsed=true]\r\e[0KClick here to see the docker_build_script"
        ./gitlab-ci/docker/docker-build-image.sh --nix
        echo -e "\e[0Ksection_end:$(date +%s):docker_build_script\r\e[0K"

        # push new image to dockerhub
        docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
        docker push dfinity/ic-build:"$TAG"
        docker push dfinity/ic-build:latest
        docker push dfinity/ic-build-nix:"$TAG"
        docker push dfinity/ic-build-nix:latest
        PUSHED=true
      fi 

      # case where pushing docker image on 1st try failed
      if [ "$EXISTS" != "true" ] && [ "${PUSHED:-}" != "true" ]; then
        docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
        docker push dfinity/ic-build:"$TAG"
        docker push dfinity/ic-build-nix:"$TAG"
      fi

      echo -e "\e[0Ksection_start:$(date +%s):sys_info[collapsed=true]\r\e[0KClick here to see system info"
      echo "SYS-INFO UPTIME"
      uptime
      echo "SYS-INFO DISK SPACE"
      df -h
      echo "SYS-INFO DOCKER IMAGES"
      docker images
      echo "SYS-INFO DOCKER CONTAINERS"
      docker ps -a
      echo -e "\e[0Ksection_end:$(date +%s):sys_info\r\e[0K"

docker-autobuild:
  extends:
    - .ubuntu-nix-docker
    - .rules-prs-dockerfile-changes
  needs: []
  stage: test
  script:
    - |
      set -euo pipefail

      # safeguard for feedback loop [this CI job pushes commits]
      COMMIT_COUNT=$(git rev-list --count "$(git merge-base HEAD master)"..HEAD)
      if [ "$COMMIT_COUNT" -gt 256 ]; then
          echo "Reached hard safeguard limit of commits"
          exit 1
      fi

      # check if tag changed
      pushd gitlab-ci/docker
      TAG="$(./docker-get-image-tag.sh)"
      cd ../config
      # names must match with names in docker-build-image.sh!
      IMG_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build"
      IMG_NIX_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build-nix"
      IMG_NAME_FULL="$IMG_NAME:$TAG"
      IMG_NIX_NAME_FULL="$IMG_NIX_NAME:$TAG"
      # return if no changes
      if grep -q "$IMG_NAME_FULL" -- *; then
          echo "No changes required to build a new docker ic-build image"
          exit 0
      fi
      popd

      # build new ic-build image
      ./gitlab-ci/docker/docker-build-image.sh --nix

      # push the new ic-build[-nix] image it to gitlab registry
      docker login -u gitlab-ci-token -p "$GITLAB_API_TOKEN" registry.gitlab.com
      docker push "$IMG_NAME_FULL"
      docker push "$IMG_NIX_NAME_FULL"

      # update gitlab's docker image tags
      pushd gitlab-ci/config
      sed -i -E "s|$IMG_NAME:[^\"]{5,}|$IMG_NAME_FULL|g" -- *
      sed -i -E "s|$IMG_NIX_NAME:[^\"]{5,}|$IMG_NIX_NAME_FULL|g" -- *
      cd ../docker
      echo "$TAG" > TAG
      popd

      # commit and push the change upstream
      git config --global user.email "idx@dfinity.org"
      git config --global user.name "IDX GitLab Automation"
      git commit -a -m "Updating docker image in CI"
      git remote add origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git remote set-url origin \
          "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
          || true
      git push --set-upstream origin HEAD:"$CI_COMMIT_REF_NAME"

      # try to free some space if above 80%
      DISK_UTIL=$(df / | tail -1 | awk '{print 0+$5}')
      if [ "$DISK_UTIL" -gt 80 ]; then
          df -h /
          docker container prune -f
          docker image prune -f
      fi
      df -h /
