e2e-scalability-suite-test:
  extends:
    - .e2e-test-base
  needs:
    - job: artifacts-upload-to-s3
    - job: guest-os-diskimg
      artifacts: false
  artifacts:
    paths:
    - ic-os/guestos/test-out/e2e-scalability-suite-test
    - scalability/
  script:
    - |
      VERSION=$(cat VERSION)
      export VERSION
      # release
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="release" \
          --out="artifacts/release"
      # canisters
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="canisters" \
          --out="artifacts/canisters"
      # disk-img
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="${VERSION}" --remote-path="guest-os/disk-img" \
          --out="ic-os/guestos/build-out/disk-img"

      # Make sure the host has mounted necessary devices into the docker container.
      # And check dependencies.
      ls -lah /dev/kvm /dev/net/tun "${CI_PROJECT_DIR}/artifacts/release" "${CI_PROJECT_DIR}/ic-os/guestos/build-out"

      mkdir -p gitlab-runner-tmp; cd gitlab-runner-tmp

      tar --sparse -xvf  "${CI_PROJECT_DIR}/ic-os/guestos/build-out/disk-img/disk-img.tar.gz"

      ls "${CI_PROJECT_DIR}/artifacts/canisters"
      for canister in "${CI_PROJECT_DIR}"/artifacts/canisters/*.gz; do
        pigz -d "${canister}"
      done
      ls "${CI_PROJECT_DIR}/artifacts/canisters"

      for f in ic-admin ic-nns-init ic-prep ic-workload-generator; do
        pigz -d "${CI_PROJECT_DIR}/artifacts/release/$f.gz"
        chmod u+x "${CI_PROJECT_DIR}/artifacts/release/$f"
        ln -sf "${CI_PROJECT_DIR}/artifacts/release/$f" "$f"
      done

      ls -lah

      # Prepare network. There are more convenient ways to do it if requisite
      # services are set up (which they aren't in a simple docker runner),
      # but probably also helpful for debugging to have this "explicit" for now.

      sudo ip link del ipv6_ic_node0 || true
      sudo ip link del ipv6_ic_node1 || true
      sudo ip link del ipv6_ic || true

      sudo ip tuntap add ipv6_ic_node0 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node0 up

      sudo ip tuntap add ipv6_ic_node1 mode tap user ubuntu
      sudo ip link set dev ipv6_ic_node1 up

      sudo ip link add name ipv6_ic type bridge
      sudo ip link set ipv6_ic_node0 master ipv6_ic
      sudo ip link set ipv6_ic_node1 master ipv6_ic
      sudo ip link set dev ipv6_ic up

      sudo ip addr add fd00:2:1:1:1::1/64 dev ipv6_ic

      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e"
      mkdir -p "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e-scalability-suite-test"

      # Write GIT revision number in artifacts directory, otherwise benchmark suite will
      # attempt to re-download the artifacts from S3 (and the ones from this branch are
      # not there yet)
      git rev-parse HEAD > "${CI_PROJECT_DIR}/artifacts/release/githash"

      GUESTOS_IMG="$(pwd)/disk.img"
      cd "${CI_PROJECT_DIR}/scalability"

      # Actual test script, sets up VMs and drives the test.
      pipenv --python 3
      pipenv install -r requirements.txt

      capsule -v -i "../ic-os/guestos/tests/*.py" -i "../scalability/**/*" -i "../gitlab-runner-tmp/**/*" -- \
      pipenv run "${CI_PROJECT_DIR}/ic-os/guestos/tests/e2e-benchmarking-suite.py" \
          --vmtoolscfg=internal \
          --timeout "$GUEST_OS_TEST_TIMEOUT" \
          --disk_image "$GUESTOS_IMG" \
          --ic_admin_bin "${CI_PROJECT_DIR}/artifacts/release/ic-admin" \
          --nns_canisters "${CI_PROJECT_DIR}/artifacts/canisters/" \
          --ic_prep_bin "${CI_PROJECT_DIR}/artifacts/release/ic-prep" \
          --install_nns_bin "${CI_PROJECT_DIR}/artifacts/release/ic-nns-init" \
          --artifacts_path "${CI_PROJECT_DIR}/artifacts/release/" \
          --log_directory "${CI_PROJECT_DIR}/ic-os/guestos/test-out/e2e-scalability-suite-test"
