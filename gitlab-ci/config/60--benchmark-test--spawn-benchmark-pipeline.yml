.benchmark-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-benchmark-tests
  stage: benchmark-tests
  resource_group: $TESTNET
  dependencies: []  # don't copy artifacts from other jobs by default
  variables:
    SHELL_WRAPPER: "/usr/bin/time"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    TESTNET: "cdslo"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  artifacts:
    when: always
    paths:
      - $CI_JOB_STAGE/$CI_JOB_NAME
  tags:
    - ic-prod-tests
    - docker
    - ubuntu
  timeout: 3 hours

# BENCHMARK SUITE maximum_capacity_system_baseline with query calls
maximum-capacity-system-baseline-query:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 max_capacity_system_baseline.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --skip_generate_report=False --is_ci_job=True
      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 gzip
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_system_baseline with update calls
maximum-capacity-system-baseline-update:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 max_capacity_system_baseline.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --skip_generate_report=False --is_ci_job=True
      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 gzip
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_large_memory with query calls
maximum-capacity-large-memory-query:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 max_capacity_large_memory.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --skip_generate_report=False --is_ci_job=True
      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 gzip
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_large_memory with update calls
maximum-capacity-large-memory-update:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 max_capacity_large_memory.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --skip_generate_report=False --use_updates=True --is_ci_job=True
      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 gzip
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"


# BENCHMARK SUITE xnet_experiment
benchmark-xnet:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --hosts-ini hosts_single_node_subnets.ini
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 run_xnet_experiment.py --testnet $TESTNET --skip_generate_report=False
      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 gzip
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE gossip experiment
large-subnet-gossip-experiment:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --hosts-ini hosts_large_unassigned.ini
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER python3 max_capacity_gossip.py --testnet $TESTNET --wg_testnet $TESTNET --skip_generate_report=False --use_updates=True --update_allowable_t_median=10000
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

.benchmark-nightly-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-benchmark-nightly-tests
  stage: benchmark-nightly-tests
  resource_group: $TESTNET
  dependencies: []  # don't copy artifacts from other jobs by default
  variables:
    SHELL_WRAPPER: "/usr/bin/time"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    cd_target_env: "BENCHMARK_NIGHTLY"
    CD_ENV: "BENCHMARK_NIGHTLY"
    TESTNET: "cdslo"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  artifacts:
    when: always
    paths:
      - $CI_JOB_STAGE/$CI_JOB_NAME
  tags:
    - ic-prod-tests
    - docker
    - ubuntu
  timeout: 1 hour

# Checks system performance changes against standard numbers and against previous release
system-baseline-performance-test-nightly:
   extends: .benchmark-nightly-test
   artifacts:
    when: always
    paths:
      - scalability/
   script:
    - |
      set -eExou pipefail
      git fetch

      # Find the release candidate branch name for last day
      LAST_TRIMMED_RC=$(RC_DATE_TIME=${DISKIMG_BRANCH#'origin/rc--'}; RC_TODAY=$(date -d "${RC_DATE_TIME%_*}" '+%Y-%m-%d'); RC_YESTERDAY=$(date -d "$RC_TODAY -1 day" '+%Y-%m-%d'); LAST_RC_BRANCH=$(git branch --all | grep "rc--$RC_YESTERDAY" | xargs); LAST_TRIMMED_RC="${LAST_RC_BRANCH/remotes\//}"; echo "$LAST_TRIMMED_RC";)

      # Run system baseline performance evaluation with old version and new version
      cd ./scalability
      $SHELL_WRAPPER pip3 install --user -r requirements.txt
      $SHELL_WRAPPER timeout 1h python3 ./system_baseline_test.py --testnet "$TESTNET" --wg_testnet "$WG_TESTNET" --iter_duration 300 --skip_generate_report=False --target_query_load=600 --target_update_load=60 --base_branch="$LAST_TRIMMED_RC" --upgrade_branch="$DISKIMG_BRANCH" --is_ci_job=True
