.benchmark-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-benchmark-tests
  stage: benchmark-tests
  resource_group: $TESTNET
  dependencies: []  # don't copy artifacts from other jobs by default
  variables:
    SHELL_WRAPPER: "/usr/bin/time"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: "cdslo"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  artifacts:
    when: always
    paths:
      - $CI_JOB_STAGE/$CI_JOB_NAME
  tags:
    - ic-prod-tests
    - docker
    - ubuntu
  timeout: 3 hours

# BENCHMARK SUITE maximum_capacity_system_baseline with query calls
maximum-capacity-system-baseline-query:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  variables:
    TESTNET: "cdmax"
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability
      
      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER pipenv run experiments/max_capacity_system_baseline.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_system_baseline with update calls
maximum-capacity-system-baseline-update:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt
      
      $SHELL_WRAPPER pipenv run experiments/max_capacity_system_baseline.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_large_memory with query calls
maximum-capacity-large-memory-query:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  variables:
    TESTNET: "cdmax"
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER pipenv run experiments/max_capacity_large_memory.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --target_query_load=160

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# BENCHMARK SUITE maximum_capacity_large_memory with update calls
maximum-capacity-large-memory-update:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER pipenv run experiments/max_capacity_large_memory.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --target_update_load=25

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"


# SCENARIO TEST maximum_capacity_rejoin_script: have 30GiB state in old checkpoint and start from 20GiB of fetched state size and increase by 5GiB each time
# Repeatedly run rejoin tests for at most 20 times until state sync reaches its limit
maximum-capacity-rejoin-script:
  extends: .benchmark-test
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
      export GIT_REVISION

      $SHELL_WRAPPER ./testnet/tests/scripts/maximum_capacity_rejoin.sh "$TESTNET" 30 20 5 20 normal "$CI_JOB_STAGE/$CI_JOB_NAME"
  timeout: 10 hours


# SCENARIO TEST maximum_capacity_xnet_script: start from initial rate at 210 and increase by 100 each time
# 10min @ {increased_rate} XNet requests * 1 KB / round
# Repeatedly run xnet tests for at most 10 times until the xnet sending rate reaches its limit
maximum-capacity-xnet-script:
  extends: .benchmark-test
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
      export GIT_REVISION

      $SHELL_WRAPPER ./testnet/tests/scripts/maximum_capacity_xnet_slo.sh "$TESTNET" 2 210 100 10 1024 normal "$CI_JOB_STAGE/$CI_JOB_NAME"
  timeout: 6 hours

# BENCHMARK SUITE xnet_experiment
benchmark-xnet:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --hosts-ini hosts_single_node_subnets.ini
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER pipenv run experiments/run_xnet_experiment.py --testnet $TESTNET --hosts_ini_filename=hosts_single_node_subnets.ini

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  timeout: 6 hours

# BENCHMARK SUITE gossip experiment
large-subnet-gossip-experiment:
  extends: .benchmark-test
  artifacts:
    when: always
    paths:
      - scalability/
  script:
    - |
      set -eExou pipefail
      git fetch
      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --hosts-ini hosts_large_unassigned.ini
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER pipenv run experiments/max_capacity_gossip.py --testnet $TESTNET --wg_testnet $TESTNET --wg_subnet 2 --use_updates=True --update_allowable_t_median=10000 --hosts_ini_filename=hosts_large_unassigned.ini
      
      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --is_max_capacity_run="True" --gitlab_job_id="$CI_JOB_ID"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

.benchmark-spot-test:
  extends:
    - .ubuntu-nix-docker
    - .rules-benchmark-spot-tests
  stage: benchmark-spot-tests
  resource_group: $TESTNET
  dependencies: []  # don't copy artifacts from other jobs by default
  variables:
    SHELL_WRAPPER: "/usr/bin/time"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: "BENCHMARK_NIGHTLY"
    CD_ENV: "BENCHMARK_NIGHTLY"
    TESTNET: "cdrc02"
    WG_TESTNET: "cdrc02"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  artifacts:
    when: always
    paths:
      - $CI_JOB_STAGE/$CI_JOB_NAME
  tags:
    - ic-prod-tests
    - docker
    - ubuntu
  timeout: 1 hour

# Checks system performance with query calls
system-baseline-query-performance-test-nightly:
   extends: .benchmark-spot-test
   artifacts:
    when: always
    paths:
      - scalability/
   script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"

      # Run system baseline performance evaluation
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER timeout 1h pipenv run experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --load=600  --use_updates=False

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=200
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"

# Checks system performance with update calls
system-baseline-update-performance-test-nightly:
   extends: .benchmark-spot-test
   artifacts:
    when: always
    paths:
      - scalability/
   script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      # Note that this benchmark needs unassigned nodes
      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"

      # Run system baseline performance evaluation
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt

      $SHELL_WRAPPER timeout 1h pipenv run experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --load=60  --use_updates=True

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=2300
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"


# Check system performance during heavy memory updates
heavy-memory-update-performance-test-nightly:
   extends: .benchmark-spot-test
   artifacts:
    when: always
    paths:
      - scalability/
   script:
    - |
      set -eExou pipefail
      git fetch

      GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

      $SHELL_WRAPPER timeout 30m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"

      # Run heavy memory update performance evaluation
      cd ./scalability

      $SHELL_WRAPPER pipenv --python 3
      $SHELL_WRAPPER pipenv install -r requirements.txt
      
      $SHELL_WRAPPER timeout 1h pipenv run experiments/run_large_memory_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --iter_duration 300 --target_update_load=15 --use_updates=True

      TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
      $SHELL_WRAPPER pipenv run python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
      $SHELL_WRAPPER pipenv run python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=3300
      $SHELL_WRAPPER pipenv run python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

      cd -

      $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
