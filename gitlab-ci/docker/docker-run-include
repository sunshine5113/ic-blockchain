#!/usr/bin/env bash
# Initialize the args for starting the docker container.

set -eEuo pipefail

REPO_ROOT="$(
    cd "$(dirname "$0")"
    git rev-parse --show-toplevel
)"

IMAGE_TAG=${IMAGE_TAG:-$(cat "$REPO_ROOT/gitlab-ci/docker/TAG")}

USER=$(whoami)
if [ $USER == ubuntu ]; then
    PREFIX=""
else
    SET_UID="$(id -u $USER)"
    PREFIX="$USER-$SET_UID"
fi

IMAGE="${IMAGE:-dfinity/ic-build:$PREFIX-$IMAGE_TAG}"
WORKDIR="/ic"

DOCKER_RUN_ARGS=(
    -w "$WORKDIR"

    -v /var/run/docker.sock:/var/run/docker.sock
    -v /dev/kvm:/dev/kvm

    # Environment variables matching what GitLab sets in CI pipelines to make scripts easier to debug
    -e CI_PROJECT_DIR=${CI_PROJECT_DIR:-"$WORKDIR"}
    -e CI_COMMIT_SHA=${CI_COMMIT_SHA:-"$(git rev-parse HEAD)"}
    -e CI_JOB_NAME=${CI_JOB_NAME:-""}
    -e SHELL_WRAPPER="${SHELL_WRAPPER:-/usr/bin/time}"
    -e VERSION=${VERSION:-"$(git rev-parse HEAD)"}
)

# if i'm not withing docker already, bind mount the source
if [ ! -e /.dockerenv ]; then
    # we would make this readonly to ensure people don't accidentally chown things
    # to ubuntu, but it also prevents cargo from updating Cargo.lock
    DOCKER_RUN_ARGS+=(
        --mount type=bind,source="$REPO_ROOT",target=$WORKDIR
    )
else
    DOCKER_RUN_ARGS+=(
        --mount type=volume,source="ic-artifacts${CI_JOB_ID:-}",destination=/ic/artifacts
    )
fi

if [ -z "${CI_DISPOSABLE_ENVIRONMENT:-}" ]; then
    DOCKER_RUN_ARGS+=(-it)
fi

if [ -n "${SSH_AUTH_SOCK:-}" ]; then
    DOCKER_RUN_ARGS+=(
        -v "$SSH_AUTH_SOCK:/ssh-agent"
        -e SSH_AUTH_SOCK="/ssh-agent"
    )
fi
